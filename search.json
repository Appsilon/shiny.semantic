[{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"development","dir":"","previous_headings":"","what":"[development]","title":"NA","text":"shiny.semantic longer uses CDN default source assets. Instead, semantic.assets package introduced.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"added","dir":"","previous_headings":"[0.4.2]","what":"Added","title":"NA","text":"update_tabset added mobile grid demo example file_input fileInput example","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"changed","dir":"","previous_headings":"[0.4.2]","what":"Changed","title":"NA","text":"tabset default grid tabs grid correct improts now grid supports mobile screen resolutions now fixed calendar dates working properly different timezones calendar - added check na max/min fixed multiple select bug dropdown fixed Custom Slider Labels adding fixed updateSelectInput","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"added-1","dir":"","previous_headings":"[0.4.0]","what":"Added","title":"NA","text":"progress bar notification (toasts) accordion 4 vignettes modals: modalDialog, removeModal, remove_all_modals new STYLEGUIDE introduced horizontal menu shiny-like API introduced actionButton, updateActionButton, selectInput, updateSelectInput, icon, numericInput, updateNumericInput, textAreaInput, textInput, numericInput, checkboxInput counter_button almost functions working examples now","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"changed-1","dir":"","previous_headings":"[0.4.0]","what":"Changed","title":"NA","text":"ui (static) elements renamed name object generate, eg. uiicon -> icon, uibutton -> button, etc. uimessage message_box now uilist list_container now dropdown dropdown_input now rating changed rating_input, uislider now slider_input, range renamed uicalendar calendar uidropdown dropdown_menu now checkbox_input replaces simple_checkbox input_id default handler input objects now dateInput exported supressing bootstrap parametrised semanticPage","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"removed","dir":"","previous_headings":"[0.4.0]","what":"Removed","title":"NA","text":"checkbox constant","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"added-2","dir":"","previous_headings":"[0.3.0]","what":"Added","title":"NA","text":"added semantic modal added calendar shiny.custom.semantic.cdn options introduced get dependencies custom location.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"changed-2","dir":"","previous_headings":"[0.3.0]","what":"Changed","title":"NA","text":"Migrate fomantic 2.8.3 checkbox_ui completely removed. Use simple_checkbox instead. updated slider","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"removed-1","dir":"","previous_headings":"[0.3.0]","what":"Removed","title":"NA","text":"slider_input removed","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"added-3","dir":"","previous_headings":"[0.2.4]","what":"Added","title":"NA","text":"shiny.custom.semantic.cdn options introduced get dependencies custom location.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"added-4","dir":"","previous_headings":"[0.1.2]","what":"Added","title":"NA","text":"Add multiple selection search dropdown function uimessages creates UI Semantics message Shorter alternative uimessage Semantic ui syntactic sugar : form, fields, field rexport HTML label tab. (#43) New function uimenu creates menu using Semantic UI Dropdown item (uses dropdown Semantic UI) right menu. Also changed style naming functions one fits rest code. Items now can feature like ‘active’, ‘header’, etc. Created uidropdown function generates dropdown using Semantic UI. works independetly inside Semantic UI Menu (created uimenu). Create list header description icons. Add commonly used parse_value function. Add semantic slider input component. Dependencies switched cdn + theme support added semantic. semantic.themes options introduced get dependencies. Theming example added.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"changed-3","dir":"","previous_headings":"[0.1.2]","what":"Changed","title":"NA","text":"Adjust countries example. Updated documentation. Better styled examples. Refactor UI menu functions. Changed way otems added menu. Also dropdown item can added menu using uidropdown. Added function uilabel create Semantic UI labels. New examples use uimenu.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"fixed","dir":"","previous_headings":"[0.1.2]","what":"Fixed","title":"NA","text":"Fixing input problem shiny_input. Fixed suspendWhenHidden problem tabset.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"removed-2","dir":"","previous_headings":"[0.1.2]","what":"Removed","title":"NA","text":"Deleted repetition dropdown_choice function","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"id_011","dir":"","previous_headings":"","what":"[0.1.1]","title":"NA","text":"2017-05-29","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"added-5","dir":"","previous_headings":"[0.1.1]","what":"Added","title":"NA","text":"Show pointer hovering tabset menu items. Multiple selection search dropdown. Semantic search api choice selection + example. Default dropdown component added shiny.semantic.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"fixed-1","dir":"","previous_headings":"[0.1.1]","what":"Fixed","title":"NA","text":"Documentation.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"changed-4","dir":"","previous_headings":"[0.1.1]","what":"Changed","title":"NA","text":"Documentation examples. Lexical changes description section.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"id_010","dir":"","previous_headings":"","what":"[0.1.0]","title":"NA","text":"2016-12-05","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CHANGELOG.html","id":"added-6","dir":"","previous_headings":"[0.1.0]","what":"Added","title":"NA","text":"First version API. Search selection use api example. Examples added. Wrap README docs. Basic text input. Enable updateTextInput shiny inputs.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.0.0, available https://www.contributor-covenant.org/version/1/0/0/code--conduct.html","code":""},{"path":"https://appsilon.github.io/shiny.semantic/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"The MIT License (MIT)","title":"The MIT License (MIT)","text":"Copyright © 2016 Appsilon Sp. z o.o. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/STYLEGUIDE.html","id":"variables-and-argument-names","dir":"","previous_headings":"","what":"Variables and argument names","title":"Styleguide","text":"Variables follow snake case naming style (unless overlap Shiny syntax). Try give meaningful self explanatory names.","code":"my_variable <- 33  function(input, another_argument){}"},{"path":"https://appsilon.github.io/shiny.semantic/STYLEGUIDE.html","id":"constants","dir":"","previous_headings":"","what":"Constants","title":"Styleguide","text":"Constants defined capital letter snake case kept constants.R script (unless ’re internal).","code":"COLORS <- c(\"red\", \"green\", \"blue\")"},{"path":"https://appsilon.github.io/shiny.semantic/STYLEGUIDE.html","id":"function-names","dir":"","previous_headings":"","what":"Function names","title":"Styleguide","text":"Function called snake_case. Functions define UI contain name element, eg. box, horizontal_menu Functions define active elements contain input name, eg. checkbox_input.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/STYLEGUIDE.html","id":"overriding-shiny-functions","dir":"","previous_headings":"","what":"Overriding shiny functions","title":"Styleguide","text":"overriding shiny functions usually follow shiny styling. Usually requires creating function shiny.semantic syntax implementing wrapper follows shiny syntax. !! argument names can actually follow camelCase syntax. Example:","code":"# semantic styling action_button <- function(input_id, label, icon = NULL, width = NULL, ...) {   ... }  # shiny styling actionButton <- function(inputId, label, icon = NULL, width = NULL, ...) {   ... }"},{"path":"https://appsilon.github.io/shiny.semantic/articles/basics.html","id":"quick-qa","dir":"Articles","previous_headings":"","what":"Quick Q&A","title":"Shiny vs shiny.semantic - understanding the world of Bootstrap and FomanticUI","text":"First , let’s answer questions: need shiny.semantic? can build Shiny apps standard shiny UI relies Bootstrap. means Shiny attaches CSS JS code responsible neat look. However, might notice apps made way tend look quite similar. shiny.semantic helps add fresh look web application providing alternative UI framework works hood. shiny.semantic Fomantic UI? Similarly Shiny attaching Bootstrap CSS JS libraries, shiny.semantic relies Fomantic UI. Historically, built package around Semantic UI library, got deprecated now (since December 2019) rely well-supported maintained community fork called Fomantic UI. need learn new syntax able use ? ! convenience, created wrappers popular functions know Shiny. example, can create action button using snake case (shiny.semantic standard): action_button, can use, familiar Shiny, camel case consistent parameters: actionButton. Note, however, philosophy behind Bootstrap Fomantic quite different, behaviour might also differ. Usually shiny.semantic warns can learn documentation specific function. Can use standard Shiny components shiny.semantic? depends. general, able render shiny.semantic components correctly, app UI code must surrounded semanticPage (equivalent fluidPage) function switches standard Bootstrap dependencies. Thus components Shiny might look just bad, don’t worry - shiny.semantic alternatives. said , standard HTML elements Shiny work just fine (like shiny::div shiny::h2).","code":""},{"path":"https://appsilon.github.io/shiny.semantic/articles/basics.html","id":"how-to-use-shiny-semantic","dir":"Articles","previous_headings":"","what":"How to use shiny.semantic?","title":"Shiny vs shiny.semantic - understanding the world of Bootstrap and FomanticUI","text":"can use shiny.semantic two ways:","code":""},{"path":"https://appsilon.github.io/shiny.semantic/articles/basics.html","id":"a-using-fomantic-css-classes","dir":"Articles","previous_headings":"How to use shiny.semantic?","what":"(a) Using Fomantic CSS classes","title":"Shiny vs shiny.semantic - understanding the world of Bootstrap and FomanticUI","text":"know web development, can create number components extending standard Shiny objects class definitions Fomantic UI documentation. example:","code":"div(class = \"ui raised segment\",   div(     a(class=\"ui green ribbon label\", \"Link\"),     p(\"Lorem ipsum, lorem ipsum, lorem ipsum\"),     actionButton(\"button\", \"Click\")   ) )"},{"path":"https://appsilon.github.io/shiny.semantic/articles/basics.html","id":"b-using-predefined-objects","dir":"Articles","previous_headings":"How to use shiny.semantic?","what":"(b) Using predefined objects","title":"Shiny vs shiny.semantic - understanding the world of Bootstrap and FomanticUI","text":"comfortable web development, can take advantage number elements implemented . See examples : components visit Components live demo website examples/ folder repository. Little sneak-peak can get listed graphics . components may insert just single line code!  want learn use particular UI component, check documentation. example, can call RStudio (see docs counter button): use documentation website. examples come easy use code snippets help get started. hope short overview useful. Good luck building first amazing app shiny.semantic :)","code":"range_input(\"range\", 10, 15, 0, 20) text_input(\"txt\", type = \"text\", placeholder = \"Enter Text\") date_input(\"date\") ?counter_button"},{"path":"https://appsilon.github.io/shiny.semantic/articles/fomantic_js.html","id":"section-using-fomantic-ui-javascript-elements-advanced","dir":"Articles","previous_headings":"","what":"Using Fomantic UI JavaScript elements [Advanced]","title":"Using Fomantic UI JavaScript elements [Advanced]","text":"Fomantic UI elements require run specific JS code DOM document ready. least 2 options : Use shinyjs Use shiny::tags$script()","code":"library(shinyjs) ... jsCode <- \" # Fomantic UI componts JS \" ... ui <- function() {   shinyUI(     semanticPage(       title = \"Your page title\",       shinyjs::useShinyjs(),       # Your UI code     )   ) } server <- shinyServer(function(input, output) {   runjs(jsCode)   # Your Shiny logic }) shinyApp(ui = ui(), server = server) ... jsCode <- \" $(document).ready(function() {   # Semantic UI components JS code, like:   #$('.rating').rating('setting', 'clearable', true);   #$('.disabled .rating').rating('disable'); }) ... \"  ui <- function() {   shinyUI(     semanticPage(       title = \"My page\",       tags$script(jsCode),       # Your UI code     )   ) } ... server <- shinyServer(function(input, output) {   # Your Shiny logic })  shinyApp(ui = ui(), server = server)"},{"path":"https://appsilon.github.io/shiny.semantic/articles/intro.html","id":"create-ui-inside-documents","dir":"Articles","previous_headings":"","what":"Create UI inside documents","title":"Build your first dynamic shiny.semantic app using layout and grid","text":"generate first UI shiny.semantic:","code":"uirender(   shiny::tagList(     h4(\"Numeric input\", icon(\"world\")),     shiny.semantic::numeric_input(\"input\", value = 0, label = \"\"),     shiny.semantic::list_container(list(         list(header = \"Item 1\", description = \"My text for item 1\", icon = \"cat\"),         list(header = \"Item 2\", description = \"My text for item 2\", icon = \"tree\"),         list(header = \"Item 3\", description = \"My text for item 3\", icon = \"dog\")       ), is_divided = TRUE     )   ), width = \"200px\", height = \"280px\")"},{"path":"https://appsilon.github.io/shiny.semantic/articles/intro.html","id":"create-a-simple-shiny-app","dir":"Articles","previous_headings":"","what":"Create a simple Shiny App","title":"Build your first dynamic shiny.semantic app using layout and grid","text":"Let’s create Shiny app semanticPage() just h1 title.","code":"ui <- semanticPage(   title = \"My first page\",   h1(\"My page\") )  server <- function(input, output, session) {}  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.semantic/articles/intro.html","id":"built-in-layouts","dir":"Articles","previous_headings":"Create a simple Shiny App","what":"Built-in layouts","title":"Build your first dynamic shiny.semantic app using layout and grid","text":"Now let’s add sidebar layout sidebar_layout() sidebar panel sidebar_panel() main panel main_panel(). sidebar displayed distinct background color typically contains input controls. main area occupies 2/3 horizontal width typically contains outputs.  Next let’s fill main panel main_panel() Fomantic (Semantic previously) UI segment containing 2 cards.  Time fill sidebar sidebar_panel(), let’s add dropdown. create input using dropdown_input().  Let’s make dropdown something generate histogram simple plot selected mtcars column using dropdown.  layouts can use. Just check documentation : splitLayout, flow_layout, vertical_layout !","code":"ui <- semanticPage(   title = \"My first page\",   h1(\"My page\"),   sidebar_layout(     sidebar_panel(),     main_panel()     ) )  server <- function(input, output, session) {}  shinyApp(ui, server) ui <- semanticPage(   title = \"My first page\",   h1(\"My page\"),   sidebar_layout(     sidebar_panel(),     main_panel(       segment(          cards(            class = \"two\",            card(class = \"red\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 1\"),                  div(class = \"meta\", \"Sub title card 1\"),                  div(class = \"description\", \"More detail description card 1\")              )            ),            card(class = \"blue\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 2\"),                  div(class = \"meta\", \"Sub title card 2\"),                  div(class = \"description\", \"More detail description card 2\")                  )              )            )          )       )     )   )  server <- function(input, output, session) {}  shinyApp(ui, server) ui <- semanticPage(   title = \"My first page\",   h1(\"My page\"),   sidebar_layout(     sidebar_panel(       dropdown_input(\"mtcars_dropdown\", c(\"mpg\", \"cyl\", \"disp\", \"hp\"), value = \"mpg\"),       textOutput(\"dropdown\")     ),     main_panel(       segment(          cards(            class = \"two\",            card(class = \"red\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 1\"),                  div(class = \"meta\", \"Sub title card 1\"),                  div(class = \"description\", \"More detail description card 1\")              )            ),            card(class = \"blue\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 2\"),                  div(class = \"meta\", \"Sub title card 2\"),                  div(class = \"description\", \"More detail description card 2\")              )            )          )       )       )     ) )  server <- function(input, output, session) {   output$dropdown <- renderText(input$mtcars_dropdown) }  shinyApp(ui, server) ui <- semanticPage(   title = \"My first page\",   h1(\"My page\"),   sidebar_layout(     sidebar_panel(       p(\"Select variable for plots:\"),       dropdown_input(\"mtcars_dropdown\", c(\"mpg\", \"cyl\", \"disp\", \"hp\"), value = \"mpg\")     ),     main_panel(       segment(          cards(            class = \"two\",            card(class = \"red\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 1\"),                  div(class = \"meta\", \"Sub title card 1\"),                  div(class = \"description\", \"More detail description card 1\")              )            ),            card(class = \"blue\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 2\"),                  div(class = \"meta\", \"Sub title card 2\"),                  div(class = \"description\", \"More detail description card 2\")              )            )          )       ),       plotOutput(\"histogram\"),       plotOutput(\"plot\")       )     ) )  server <- function(input, output, session) {   output$dropdown <- renderText(input$mtcars_dropdown)   output$histogram <- renderPlot(hist(mtcars[[input$mtcars_dropdown]]))   output$plot <- renderPlot(plot(mtcars[[input$mtcars_dropdown]])) }  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.semantic/articles/intro.html","id":"grid-templates","dir":"Articles","previous_headings":"Create a simple Shiny App","what":"Grid templates","title":"Build your first dynamic shiny.semantic app using layout and grid","text":"Finally let’s change layout plots page make appear next . use grid() define grid template using grid_template() 1 row 2 columns size. grid template contain 2 areas chart1 chart2 assign plots’ outputs plotOutput() areas inside grid function. final effect work:  can define grids different screen sizes. example define mobile.","code":"grid_charts <- grid_template(   default = list(areas = rbind(c(\"chart1\", \"chart2\")),                  rows_height = c(\"100%\"),                  cols_width = c(\"50%\", \"50%\")) ) ui <- semanticPage(   title = \"My first page\",   h1(\"My page\"),   sidebar_layout(     sidebar_panel(       p(\"Select variable for plots:\"),       dropdown_input(\"mtcars_dropdown\", c(\"mpg\", \"cyl\", \"disp\", \"hp\"), value = \"mpg\")     ),     main_panel(       segment(          cards(            class = \"two\",            card(class = \"red\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 1\"),                  div(class = \"meta\", \"Sub title card 1\"),                  div(class = \"description\", \"More detail description card 1\")              )            ),            card(class = \"blue\",              div(class = \"content\",                  div(class = \"header\", \"Main title card 2\"),                  div(class = \"meta\", \"Sub title card 2\"),                  div(class = \"description\", \"More detail description card 2\")              )            )          )       ),       grid(grid_charts,            chart1 = plotOutput(\"histogram\"),            chart2 = plotOutput(\"plot\")          )       )     ) )  server <- function(input, output, session) {   output$dropdown <- renderText(input$mtcars_dropdown)   output$histogram <- renderPlot(hist(mtcars[[input$mtcars_dropdown]]))   output$plot <- renderPlot(plot(mtcars[[input$mtcars_dropdown]])) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/articles/semantic_integration.html","id":"plotly-integration","dir":"Articles","previous_headings":"Integration with plotly or leaflet","what":"Plotly integration","title":"Shiny.semantic integration with plotly and leaflet","text":"Similarly shiny, shiny.semantic works well popular R packages. Let’s see create simple application plotly.","code":"library(shiny) library(shiny.semantic) library(plotly)  ui <- semanticPage(   segment(     class = \"basic\",     a(class=\"ui green ribbon label\", \"Plotly demo\"),     plotlyOutput(\"plot\")    ) )  server <- function(input, output, session) {   output$plot <- renderPlotly({     plot_ly(economics, x = ~date, color = I(\"black\")) %>%       add_lines(y = ~uempmed) %>%       add_lines(y = ~psavert, color = I(\"red\"))   }) }  shinyApp(ui = ui, server = server)"},{"path":"https://appsilon.github.io/shiny.semantic/articles/semantic_integration.html","id":"leaflet-integration","dir":"Articles","previous_headings":"Integration with plotly or leaflet","what":"Leaflet integration","title":"Shiny.semantic integration with plotly and leaflet","text":"now let’s look similar example, leaflet.","code":"library(shiny) library(shiny.semantic) library(leaflet)  ui <- semanticPage(   segment(     class = \"basic\",     a(class=\"ui blue ribbon label\", \"Leaflet demo\"),     leafletOutput(\"map\")    ) )  server <- function(input, output, session) {   output$map <- renderLeaflet({     m <- leaflet() %>% addTiles()     m <- m %>% setView(21.00, 52.21, zoom = 12)     m   }) }  shinyApp(ui = ui, server = server)"},{"path":"https://appsilon.github.io/shiny.semantic/articles/semantic_integration.html","id":"datatable-integration","dir":"Articles","previous_headings":"Integration with plotly or leaflet","what":"DataTable integration","title":"Shiny.semantic integration with plotly and leaflet","text":"add neat Fomantic styling DT table need use semantic_DT wrapper.","code":"library(shiny)  library(shiny.semantic)   ui <- semanticPage(    h2(\"Pretty tables in Shiny Semantic\"),    semantic_DTOutput(\"table\")  )  server <- function(input, output, session) {    output$table <- DT::renderDataTable(      semantic_DT(mtcars)    )  }  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.semantic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Filip Stachura. Author. Dominik Krzeminski. Author. Krystian Igras. Author. Adam Forys. Author. Paweł Przytuła. Author. Jakub Chojna. Author. Olga Mierzwa-Sulima. Author. Ashley Baldry. Contributor. Jakub Chojna. Contributor. Olga Mierzwa-Sulima. Contributor. Pedro Manuel Coutinho da Silva. Contributor. Paweł Przytuła. Contributor. Kamil Żyła. Contributor. Rabii Bouhestine. Contributor. Developers Appsilon. Maintainer. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stachura F, Krzeminski D, Igras K, Forys , Przytuła P, Chojna J, Mierzwa-Sulima O (2023). shiny.semantic: Semantic UI Support Shiny. R package version 0.4.3.9001.","code":"@Manual{,   title = {shiny.semantic: Semantic UI Support for Shiny},   author = {Filip Stachura and Dominik Krzeminski and Krystian Igras and Adam Forys and Paweł Przytuła and Jakub Chojna and Olga Mierzwa-Sulima},   year = {2023},   note = {R package version 0.4.3.9001}, }"},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"shinysemantic-","dir":"","previous_headings":"","what":"Semantic UI Support for Shiny","title":"Semantic UI Support for Shiny","text":"Fomantic (Semantic) UI wrapper Shiny. library easy wrap Shiny Fomantic UI (previously Semantic). Add simple lines code give UI fresh, modern highly interactive look. shiny  shiny.semantic","code":"library(shiny) ui <- fluidPage(   div(     div(       a(\"Link\"),       p(\"Lorem ipsum, lorem ipsum, lorem ipsum\"),       actionButton(\"button\", \"Click\")     )   ) ) library(shiny.semantic) ui <- semanticPage(   div(class = \"ui raised segment\",     div(       a(class=\"ui green ribbon label\", \"Link\"),       p(\"Lorem ipsum, lorem ipsum, lorem ipsum\"),       actionButton(\"button\", \"Click\")     )   ) )"},{"path":[]},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"before-and-after","dir":"","previous_headings":"Shiny.semantic demos","what":"Before and after","title":"Semantic UI Support for Shiny","text":"show shiny.semantic can used style app change ’s look.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"component-examples","dir":"","previous_headings":"","what":"Component examples","title":"Semantic UI Support for Shiny","text":"See examples code examples folder: Static Semantic components demo Calendar date month demo update Counter button demo Custom CSS demo Dropdown update demo Form inputs demo Modal demos Multiple checkbox demo Rating update demo Search selection demos Shiny numericInput demo Shiny selectInput demo Shiny fileInput demo Slider range update demo Multiple tab demo Notification demo","code":""},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install?","title":"Semantic UI Support for Shiny","text":"can install stable shiny.semantic release CRAN repository: latest version remotes: (master branch contains stable version. Use develop branch latest features) install previous versions can run:","code":"install.packages(\"shiny.semantic\") remotes::install_github(\"Appsilon/shiny.semantic@develop\") remotes::install_github(\"Appsilon/shiny.semantic\", ref = \"0.1.0\")"},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"how-to-use-it","dir":"","previous_headings":"","what":"How to use it?","title":"Semantic UI Support for Shiny","text":"Firstly, invoke shinyUI() semanticPage() instead standard Shiny UI definitions like e.g. bootstrapPage(). now , components can annotated Fomantic UI specific CSS classes also able use shiny.semantic components. Basic example rendering simple button. look like : better understanding ’s good check Fomantic UI documentation. Note #1 moment pass page title semanticPage() Note #2 shiny package works Bootstrap library hood. shiny.semantic uses Fomantic UI. Sometimes using libraries may cause troubles rendering specific UI elements. default turn Bootstrap dependencies. However, can switch suppressing bootstrap calling semanticPage(suppress_bootstrap = FALSE, ...)","code":"library(shiny) library(shiny.semantic) ui <- semanticPage(       title = \"My page\",       div(class = \"ui button\", icon(\"user\"),  \"Icon button\")     ) server <- function(input, output) {} shinyApp(ui, server) semanticPage(title = \"Your page title\", ...)"},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute?","title":"Semantic UI Support for Shiny","text":"welcome contributions types! encourage typo corrections, bug reports, bug fixes feature requests. Feedback clarity documentation examples especially valuable. want contribute project please submit regular PR, ’re done new feature bug fix. Changes vignettes modified added new vignette, please rebuild devtools::build_vignettes(). Important: Please follow code style styleguide. Contributor Code Conduct. Make sure check follow .","code":""},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Semantic UI Support for Shiny","text":"used latest versions dependencies library, please update R environment installation. However, encounter problems, try following: --date R language environment Installing specific dependent libraries versions shiny bugs may related directly Semantic UI. case please try check issues repository. bugs may related Bootstrap. Please make sure suppressed. Instructions use ? section.","code":"install.packages(\"shiny\", version='1.4')"},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"future-enhacements","dir":"","previous_headings":"","what":"Future enhacements","title":"Semantic UI Support for Shiny","text":"create update functions input components mimic shiny close possible add glue code dsl.R make using package smoother adding semantic components new version release CRAN","code":""},{"path":"https://appsilon.github.io/shiny.semantic/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"Semantic UI Support for Shiny","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch opensource@appsilon.com Explore Rhinoverse - family R packages built around Rhino!","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/COLOR_PALETTE.html","id":null,"dir":"Reference","previous_headings":"","what":"Semantic colors — COLOR_PALETTE","title":"Semantic colors — COLOR_PALETTE","text":"https://github.com/Semantic-Org/Semantic-UI/blob/master/src/themes/default/globals/site.variables","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/COLOR_PALETTE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Semantic colors — COLOR_PALETTE","text":"","code":"COLOR_PALETTE"},{"path":"https://appsilon.github.io/shiny.semantic/reference/COLOR_PALETTE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Semantic colors — COLOR_PALETTE","text":"object class character length 13.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":null,"dir":"Reference","previous_headings":"","what":"Reporting progress (object-oriented API) — Progress","title":"Reporting progress (object-oriented API) — Progress","text":"Reporting progress (object-oriented API) Reporting progress (object-oriented API)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reporting progress (object-oriented API) — Progress","text":"Reports progress user long-running operations. package exposes two distinct programming APIs working progress. [withProgress()] [setProgress()] together provide simple function-based interface, `Progress` reference class provides object-oriented API. Instantiating `Progress` object causes progress panel created, displayed first time `set` method called. Calling `close` cause progress panel removed. version 0.14, progress indicators use Shiny's new notification API. want use old styling (example, may used customized CSS), can use `style=\"old\"` time call `Progress$new()`. want set style time `Progress$new` called, can instead call [`shinyOptions(progress.style=\"old\")`][shinyOptions] just , inside server function.","code":""},{"path":[]},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Reporting progress (object-oriented API) — Progress","text":"Progress$new() Progress$set() Progress$inc() Progress$getMin() Progress$getMax() Progress$getValue() Progress$close() Progress$clone()","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Reporting progress (object-oriented API) — Progress","text":"Creates new progress panel (display ).","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$new(session = getDefaultReactiveDomain(), min = 0, max = 1, ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"session Shiny session object, provided `shinyServer` server function. min value represents starting point progress bar. Must less `max`. max value represents end progress bar. Must greater `min`. ... Arguments may used `shiny::Progress`","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-set-","dir":"Reference","previous_headings":"","what":"Method set()","title":"Reporting progress (object-oriented API) — Progress","text":"Updates progress panel. called first time,   progress panel displayed.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$set(value = NULL, message = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"value Single-element numeric vector; value set progress bar, relative `min` `max`. `NULL` hides progress bar, currently visible. message single-element character vector; message displayed user, `NULL` hide current message (). ... Arguments may used `shiny::Progress`","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-inc-","dir":"Reference","previous_headings":"","what":"Method inc()","title":"Reporting progress (object-oriented API) — Progress","text":"Like `set`, updates progress panel. difference   `inc` increases progress bar `amount`, instead   setting specific value.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$inc(amount = 0.1, message = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"amount `inc()` method, numeric value increment progress bar. message single-element character vector; message displayed user, `NULL` hide current message (). ... Arguments may used `shiny::Progress`","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-getmin-","dir":"Reference","previous_headings":"","what":"Method getMin()","title":"Reporting progress (object-oriented API) — Progress","text":"Returns minimum value.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$getMin()"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-getmax-","dir":"Reference","previous_headings":"","what":"Method getMax()","title":"Reporting progress (object-oriented API) — Progress","text":"Returns maximum value.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$getMax()"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-getvalue-","dir":"Reference","previous_headings":"","what":"Method getValue()","title":"Reporting progress (object-oriented API) — Progress","text":"Returns current value.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$getValue()"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"Reporting progress (object-oriented API) — Progress","text":"Removes progress panel. Future calls `set`   `close` ignored.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$close()"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Reporting progress (object-oriented API) — Progress","text":"objects class cloneable method.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"Progress$clone(deep = FALSE)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (object-oriented API) — Progress","text":"deep Whether make deep clone.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/Progress-R6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reporting progress (object-oriented API) — Progress","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- semanticPage(   plotOutput(\"plot\") )  server <- function(input, output, session) {   output$plot <- renderPlot({     progress <- Progress$new(session, min=1, max=15)     on.exit(progress$close())      progress$set(message = 'Calculation in progress')      for (i in 1:15) {       progress$set(value = i)       Sys.sleep(0.5)     }     plot(cars)   }) }  shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/SIZE_LEVELS.html","id":null,"dir":"Reference","previous_headings":"","what":"Allowed sizes — SIZE_LEVELS","title":"Allowed sizes — SIZE_LEVELS","text":"Allowed sizes","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/SIZE_LEVELS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allowed sizes — SIZE_LEVELS","text":"","code":"SIZE_LEVELS"},{"path":"https://appsilon.github.io/shiny.semantic/reference/SIZE_LEVELS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Allowed sizes — SIZE_LEVELS","text":"object class character length 7.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/accordion.html","id":null,"dir":"Reference","previous_headings":"","what":"Accordion UI — accordion","title":"Accordion UI — accordion","text":"accordion may display list elements can hidden shown one click.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/accordion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accordion UI — accordion","text":"","code":"accordion(   accordion_list,   fluid = TRUE,   active_title = \"\",   styled = TRUE,   custom_style = \"\" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/accordion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accordion UI — accordion","text":"accordion_list list lists fields: `title` `content` fluid accordion fluid takes width parent div active_title active title matches `title` accordion_list element active default styled switched raw style (boxes) used custom_style character custom style added CSS accordion (advanced use)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/accordion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accordion UI — accordion","text":"shiny tag list accordion UI","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/accordion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accordion UI — accordion","text":"","code":"if (interactive()) { library(shiny) library(shiny.semantic) accordion_content <- list(   list(title = \"AA\", content = h2(\"a a a a\")),   list(title = \"BB\", content = p(\"b b b b\")) ) shinyApp(   ui = semanticPage(     accordion(accordion_content, fluid = F, active_title = \"AA\",               custom_style = \"background: #babade;\")   ),   server = function(input, output) {} ) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/action_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Action button — action_button","title":"Action button — action_button","text":"Creates action button whose value initially zero, increments one time pressed.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/action_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Action button — action_button","text":"","code":"action_button(input_id, label, icon = NULL, width = NULL, ...)  actionButton(inputId, label, icon = NULL, width = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/action_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Action button — action_button","text":"input_id input slot used access value. label contents button - text label, also use HTML, like image. icon optional icon appear button. width width input. ... Named attributes applied button remaining parameters passed button, like class. inputId input_id","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/action_button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Action button — action_button","text":"","code":"if (interactive()){ library(shiny) library(shiny.semantic) ui <- shinyUI(semanticPage(   actionButton(\"action_button\", \"Press Me!\"),   textOutput(\"button_output\") )) server <- function(input, output, session) {   output$button_output <- renderText(as.character(input$action_button)) } shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/attach_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that creates the rule for a specific setting or behavior of the modal. — attach_rule","title":"Internal function that creates the rule for a specific setting or behavior of the modal. — attach_rule","text":"Internal function creates rule specific setting behavior modal.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/attach_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that creates the rule for a specific setting or behavior of the modal. — attach_rule","text":"","code":"attach_rule(id, behavior, target, value)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/attach_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that creates the rule for a specific setting or behavior of the modal. — attach_rule","text":"id ID target modal. behavior behavior beging set . e. setting attach events. target First argument behavior. Usually target setting name. value Second argument behavior. usually action setting value.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/button.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Button — button","title":"Create Semantic UI Button — button","text":"Create Semantic UI Button","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Button — button","text":"","code":"button(input_id, label, icon = NULL, class = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Button — button","text":"input_id input slot used access value. label contents button link icon optional icon() appear button. class optional attribute added button's class. used paramters like color, size ignored. ... Named attributes applied button","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Button — button","text":"","code":"if (interactive()){ library(shiny) library(shiny.semantic) ui <- semanticPage(   shinyUI(     button(\"simple_button\", \"Press Me!\")   ) ) server <- function(input, output, session) { } shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Calendar — calendar","title":"Create Semantic UI Calendar — calendar","text":"creates default calendar input using Semantic UI. input available input[[input_id]]. function updates date calendar","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Calendar — calendar","text":"","code":"calendar(   input_id,   value = NULL,   placeholder = NULL,   type = \"date\",   min = NA,   max = NA )  update_calendar(session, input_id, value = NULL, min = NULL, max = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Calendar — calendar","text":"input_id ID calendar updated value Initial value numeric input. placeholder Text visible input nothing inputted. type Select 'year', 'month', 'date' 'time' min Minimum allowed value. max Maximum allowed value. session session object passed function given shinyServer.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/calendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Calendar — calendar","text":"","code":"# Basic calendar if (interactive()) {    library(shiny)   library(shiny.semantic)    ui <- shinyUI(     semanticPage(       title = \"Calendar example\",       calendar(\"date\"),       p(\"Selected date:\"),       textOutput(\"selected_date\")     )   )     server <- shinyServer(function(input, output, session) {      output$selected_date <- renderText(        as.character(input$date)      )    })     shinyApp(ui = ui, server = server)  }  if (FALSE) { # Calendar with max and min calendar(   name = \"date_finish\",   placeholder = \"Select End Date\",   min = \"2019-01-01\",   max = \"2020-01-01\" )  # Selecting month calendar(   name = \"month\",   type = \"month\" ) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI card tag — card","title":"Create Semantic UI card tag — card","text":"creates card tag using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI card tag — card","text":"","code":"card(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI card tag — card","text":"... arguments added attributes tag (e.g. style, class childrens etc.) class Additional classes add html tag.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI card tag — card","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     card(       div(class=\"content\",           div(class=\"header\", \"Elliot Fu\"),           div(class=\"meta\", \"Friend\"),           div(class=\"description\", \"Elliot Fu is a film-maker from New York.\")       )     )   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/cards.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI cards tag — cards","title":"Create Semantic UI cards tag — cards","text":"creates cards tag using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/cards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI cards tag — cards","text":"","code":"cards(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/cards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI cards tag — cards","text":"... arguments added attributes tag (e.g. style, class childrens etc.) class Additional classes add html tag.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/cards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI cards tag — cards","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     cards(       class = \"two\",       card(         div(class=\"content\",             div(class=\"header\", \"Elliot Fu\"),             div(class=\"meta\", \"Friend\"),             div(class=\"description\", \"Elliot Fu is a film-maker from New York.\")         )       ),       card(         div(class=\"content\",             div(class=\"header\", \"John Bean\"),             div(class=\"meta\", \"Friend\"),             div(class=\"description\", \"John Bean is a film-maker from London.\")         )       )     )   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_proper_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if color is set from Fomantic-UI palette — check_proper_color","title":"Check if color is set from Fomantic-UI palette — check_proper_color","text":"Check color set Fomantic-UI palette","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_proper_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if color is set from Fomantic-UI palette — check_proper_color","text":"","code":"check_proper_color(color)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_proper_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if color is set from Fomantic-UI palette — check_proper_color","text":"color character color name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_proper_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if color is set from Fomantic-UI palette — check_proper_color","text":"Error color belong palette","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_proper_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if color is set from Fomantic-UI palette — check_proper_color","text":"","code":"check_proper_color(\"blue\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_shiny_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether argument included as shiny exclusive parameter — check_shiny_param","title":"Checks whether argument included as shiny exclusive parameter — check_shiny_param","text":"quick function check shiny.semantic wrapper shiny function see whether extra arguments called required shiny.semantic version","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_shiny_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether argument included as shiny exclusive parameter — check_shiny_param","text":"","code":"check_shiny_param(name, func, ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_shiny_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether argument included as shiny exclusive parameter — check_shiny_param","text":"name Function argument name func Name function ... Arguments passed shiny.semantic version shiny function","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/check_shiny_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether argument included as shiny exclusive parameter — check_shiny_param","text":"shiny exclusive argument called shiny.semantic, message posted UI","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI checkbox — checkbox_input","title":"Create Semantic UI checkbox — checkbox_input","text":"Create Semantic UI checkbox","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI checkbox — checkbox_input","text":"","code":"checkbox_input(   input_id,   label = \"\",   type = NULL,   is_marked = TRUE,   style = NULL )  checkboxInput(inputId, label = \"\", value = FALSE, width = NULL)  toggle(input_id, label = \"\", is_marked = TRUE, style = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI checkbox — checkbox_input","text":"input_id Input name. Reactive value available input[[name]]. label Text displayed checkbox. type Type checkbox: NULL, 'toggle' is_marked Defines checkbox marked. Default TRUE. style Style widget. inputId input_id value is_marked width width input (currently supported, check style)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/checkbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Semantic UI checkbox — checkbox_input","text":"inputs updateable using updateCheckboxInput. following types allowed: NULL standard checkbox (default) toggle checkbox toggle form slider checkbox simple slider form","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI checkbox — checkbox_input","text":"","code":"if (interactive()){   ui <- shinyUI(     semanticPage(       p(\"Simple checkbox:\"),       checkbox_input(\"example\", \"Check me\", is_marked = FALSE),       p(),       p(\"Simple toggle:\"),       toggle(\"tog1\", \"My Label\", TRUE)     )   )   server <- function(input, output, session) {     observeEvent(input$tog1, {       print(input$tog1)     })   }   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/counterbutton.html","id":null,"dir":"Reference","previous_headings":"","what":"Counter Button — counter_button","title":"Counter Button — counter_button","text":"Creates counter button whose value increments one time pressed.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/counterbutton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counter Button — counter_button","text":"","code":"counter_button(   input_id,   label = \"\",   icon = NULL,   value = 0,   color = \"\",   size = \"\",   big_mark = \" \" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/counterbutton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counter Button — counter_button","text":"input_id input slot used access value. label content item display icon optional icon() appear button. value initial rating value (integer) color character semantic color size character size button, eg. \"medium\", \"big\" big_mark big numbers separator","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/counterbutton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counter Button — counter_button","text":"counter button object","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/counterbutton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counter Button — counter_button","text":"","code":"if (interactive()) { library(shiny) library(shiny.semantic) ui <-semanticPage(      counter_button(\"counter\", \"My Counter Button\",                    icon = icon(\"world\"),                    size = \"big\", color = \"purple\")  ) server <- function(input, output) {  observeEvent(input$counter,{    print(input$counter)   })  } shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/create_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows for the creation of modals in the server side without being tied to a specific HTML element. — create_modal","title":"Allows for the creation of modals in the server side without being tied to a specific HTML element. — create_modal","text":"Allows creation modals server side without tied specific HTML element.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/create_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows for the creation of modals in the server side without being tied to a specific HTML element. — create_modal","text":"","code":"create_modal(   ui_modal,   show = TRUE,   session = shiny::getDefaultReactiveDomain() )  showModal(ui, session = shiny::getDefaultReactiveDomain())"},{"path":"https://appsilon.github.io/shiny.semantic/reference/create_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allows for the creation of modals in the server side without being tied to a specific HTML element. — create_modal","text":"ui_modal HTML containing modal. show modal created open called (open default). session Current session. ui ui_modal show modal","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/data_frame_to_css_grid_template_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate CSS string representing grid template areas. — data_frame_to_css_grid_template_areas","title":"Generate CSS string representing grid template areas. — data_frame_to_css_grid_template_areas","text":"Generate CSS string representing grid template areas.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/data_frame_to_css_grid_template_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate CSS string representing grid template areas. — data_frame_to_css_grid_template_areas","text":"","code":"data_frame_to_css_grid_template_areas(areas_dataframe)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/data_frame_to_css_grid_template_areas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate CSS string representing grid template areas. — data_frame_to_css_grid_template_areas","text":"areas_dataframe data.frame character representing grid areas","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/data_frame_to_css_grid_template_areas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate CSS string representing grid template areas. — data_frame_to_css_grid_template_areas","text":"character","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/data_frame_to_css_grid_template_areas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate CSS string representing grid template areas. — data_frame_to_css_grid_template_areas","text":"helper function used grid_template()","code":"areas_dataframe <- rbind(    c(\"header\", \"header\", \"header\"),    c(\"menu\",   \"main\",   \"right1\"),    c(\"menu\",   \"main\",   \"right2\") )  result == \"'header header header' 'menu main right1' 'menu main right2'\""},{"path":"https://appsilon.github.io/shiny.semantic/reference/date_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Define simple date input with Semantic UI styling — date_input","title":"Define simple date input with Semantic UI styling — date_input","text":"Define simple date input Semantic UI styling","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/date_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define simple date input with Semantic UI styling — date_input","text":"","code":"date_input(   input_id,   label = NULL,   value = NULL,   min = NULL,   max = NULL,   style = NULL,   icon_name = \"calendar\" )  dateInput(   inputId,   label = NULL,   icon = NULL,   value = NULL,   min = NULL,   max = NULL,   width = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/date_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define simple date input with Semantic UI styling — date_input","text":"input_id Input id. label Label displayed date input. value Default date chosen input. min Minimum date can selected. max Maximum date can selected. style Css style widget. icon_name Icon displayed widget. inputId Input id. icon Icon displayed widget. width character width object ... arguments","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/date_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define simple date input with Semantic UI styling — date_input","text":"","code":"if (interactive()) { # Below example shows how to implement simple date range input using \\code{date_input}  library(shiny) library(shiny.semantic)  ui <- shinyUI(   semanticPage(     title = \"Date range example\",     uiOutput(\"date_range\"),     p(\"Selected dates:\"),     textOutput(\"selected_dates\")   ) )  server <- shinyServer(function(input, output, session) {   output$date_range <- renderUI({     tagList(       tags$div(tags$div(HTML(\"From\")),                date_input(\"date_from\", value = Sys.Date() - 30, style = \"width: 10%;\")),       tags$div(tags$div(HTML(\"To\")),                date_input(\"date_to\", value = Sys.Date(), style = \"width: 10%;\"))     )   })    output$selected_dates <- renderPrint({     c(input$date_from, input$date_to)   }) })  shinyApp(ui = ui, server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/define_selection_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Define search type if multiple — define_selection_type","title":"Define search type if multiple — define_selection_type","text":"Define search type multiple","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/define_selection_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define search type if multiple — define_selection_type","text":"","code":"define_selection_type(input_id, multiple)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/define_selection_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define search type if multiple — define_selection_type","text":"input_id character name multiple multiple flag","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/digits2words.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that transforms digits to words — digits2words","title":"Helper function that transforms digits to words — digits2words","text":"Helper function transforms digits words","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/digits2words.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that transforms digits to words — digits2words","text":"","code":"digits2words(number)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/digits2words.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function that transforms digits to words — digits2words","text":"number numeric digits 1 10","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/digits2words.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that transforms digits to words — digits2words","text":"character number word","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/display_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Display grid template in a browser for easy debugging — display_grid","title":"Display grid template in a browser for easy debugging — display_grid","text":"Display grid template browser easy debugging","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/display_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display grid template in a browser for easy debugging — display_grid","text":"","code":"display_grid(grid_template)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/display_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display grid template in a browser for easy debugging — display_grid","text":"grid_template generated grid_template() function","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/display_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display grid template in a browser for easy debugging — display_grid","text":"Opens browser displays grid template styled border highlight existing areas. Warning: CSS displayed RStudio viewer pane. CSS grid supported modern browsers. can see list supported browsers : https://www.w3schools.com/css/css_grid.asp","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that expose javascript bindings to Shiny app. — .onLoad","title":"Internal function that expose javascript bindings to Shiny app. — .onLoad","text":"Internal function expose javascript bindings Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that expose javascript bindings to Shiny app. — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that expose javascript bindings to Shiny app. — .onLoad","text":"libname library name pkgname package name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dropdown Semantic UI component — dropdown_input","title":"Create dropdown Semantic UI component — dropdown_input","text":"creates default *dropdown_input* using Semantic UI styles Shiny input. Dropdown already initialized available input[[input_id]].","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dropdown Semantic UI component — dropdown_input","text":"","code":"dropdown_input(   input_id,   choices,   choices_value = choices,   default_text = \"Select\",   value = NULL,   type = \"selection fluid\" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dropdown Semantic UI component — dropdown_input","text":"input_id Input name. Reactive value available input[[input_id]]. choices available options one can select . choices_value reactive value used corresponding choice. default_text Text visible dropdown nothing selected. value Pass value want initialize selection dropdown. type Change depending type dropdown wanted.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create dropdown Semantic UI component — dropdown_input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { library(shiny) library(shiny.semantic) ui <- semanticPage(   title = \"Dropdown example\",   dropdown_input(\"simple_dropdown\", LETTERS, value = \"A\"),   p(\"Selected letter:\"),   textOutput(\"dropdown\") ) server <- function(input, output) {   output$dropdown <- renderText(input[[\"simple_dropdown\"]]) }  shinyApp(ui = ui, server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Dropdown — dropdown_menu","title":"Create Semantic UI Dropdown — dropdown_menu","text":"creates dropdown using Semantic UI.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Dropdown — dropdown_menu","text":"","code":"dropdown_menu(   ...,   class = \"\",   name,   is_menu_item = FALSE,   dropdown_specs = list() )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Dropdown — dropdown_menu","text":"... Dropdown content. class class dropdown. Look https://semantic-ui.com/modules/dropdown.html possibilities. name Unique name created dropdown. is_menu_item TRUE dropdown menu item. Default FALSE. dropdown_specs list dropdown functionalities. Look https://semantic-ui.com/modules/dropdown.html#/settings possibilities.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/dropdown_menu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Dropdown — dropdown_menu","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     dropdown_menu(       \"Dropdown menu\",       icon(class = \"dropdown\"),       menu(         menu_header(\"Header\"),         menu_divider(),         menu_item(\"Option 1\"),         menu_item(\"Option 2\")       ),       name = \"dropdown_menu\",       dropdown_specs = list(\"duration: 500\")     )    ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/extract_icon_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract icon name — extract_icon_name","title":"Extract icon name — extract_icon_name","text":"Extract icon name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/extract_icon_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract icon name — extract_icon_name","text":"","code":"extract_icon_name(icon)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/extract_icon_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract icon name — extract_icon_name","text":"icon icon object","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/extract_icon_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract icon name — extract_icon_name","text":"character icon name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI field tag — field","title":"Create Semantic UI field tag — field","text":"creates field tag using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI field tag — field","text":"","code":"field(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI field tag — field","text":"... arguments added attributes tag (e.g. style, class childrens etc.) class Additional classes add html tag.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI field tag — field","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     form(       field(         tags$label(\"Name\"),         text_input(\"name\", value = \"\", type = \"text\", placeholder = \"Enter Name...\")       ),       # error field       field(         class = \"error\",         tags$label(\"Name\"),         text_input(\"name\", value = \"\", type = \"text\", placeholder = \"Enter Name...\")       ),       # disabled       field(         class = \"disabled\",         tags$label(\"Name\"),         text_input(\"name\", value = \"\", type = \"text\", placeholder = \"Enter Name...\")       )     )   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI fields tag — fields","title":"Create Semantic UI fields tag — fields","text":"creates fields tag using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI fields tag — fields","text":"","code":"fields(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI fields tag — fields","text":"... arguments added attributes tag (e.g. style, class childrens etc.) class Additional classes add html tag.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI fields tag — fields","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     form(       fields(class = \"two\",              field(                tags$label(\"Name\"),                text_input(\"name\", value = \"\", type = \"text\", placeholder = \"Enter Name...\")              ),              field(                tags$label(\"Surname\"),                text_input(\"surname\", value = \"\", type = \"text\", placeholder = \"Enter Surname...\")              ))     )   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/file_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI File Input — file_input","title":"Create Semantic UI File Input — file_input","text":"creates default file input using Semantic UI. input available input[[input_id]].","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/file_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI File Input — file_input","text":"","code":"file_input(   input_id,   label,   multiple = FALSE,   accept = NULL,   button_label = \"Browse...\",   type = NULL,   placeholder = \"no file selected\",   ... )  fileInput(   inputId,   label,   multiple = FALSE,   accept = NULL,   width = NULL,   buttonLabel = \"Browse...\",   placeholder = \"No file selected\",   ... )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/file_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI File Input — file_input","text":"input_id, inputId Input name. Reactive value available input[[input_id]]. label Display label control, NULL label. multiple Whether user allowed select upload multiple files . accept character vector \"unique file type specifiers\" gives browser hint type file server expects. Many browsers use prevent user selecting invalid file. button_label, buttonLabel Display label button. type Input type specifying class attached input container. See [Fomantic UI](https://fomantic-ui.com/collections/form.html) details. placeholder Inner input label displayed file uploaded. ... parameters passed fileInput file_input like type. width width input, e.g. '400px', '100%'.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/file_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI File Input — file_input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   library(shiny)   library(shiny.semantic)   ui <- semanticPage(     form(       div(         class = \"ui grid\",         div(           class = \"four wide column\",           file_input(\"ex\", \"Select file\"),           header(\"File type selected:\", textOutput(\"ex_file\"))         )       )     )   )   server <- function(input, output, session) {     output$ex_file <- renderText({       if (is.null(input)) return(\"No file uploaded\")       tools::file_ext(input$ex$datapath)     })   }   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/flow_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Flow layout — flow_layout","title":"Flow layout — flow_layout","text":"Lays elements left--right, top--bottom arrangement. elements given row top-aligned .","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/flow_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flow layout — flow_layout","text":"","code":"flow_layout(   ...,   cell_args = list(),   min_cell_width = \"208px\",   max_cell_width = \"1fr\",   column_gap = \"12px\",   row_gap = \"0px\" )  flowLayout(..., cellArgs = list())"},{"path":"https://appsilon.github.io/shiny.semantic/reference/flow_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flow layout — flow_layout","text":"... Unnamed arguments become child elements layout. Named arguments become HTML attributes outermost tag. cell_args additional attributes used cell layout. min_cell_width minimum width cells. max_cell_width maximum width cells. column_gap spacing columns. row_gap spacing rows. cellArgs cell_args.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/flow_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flow layout — flow_layout","text":"width elements spacing configurable. Lengths can given numeric values (interpreted pixels) character values (interpreted CSS lengths). default settings layout closely resembles flowLayout Shiny.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/flow_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flow layout — flow_layout","text":"","code":"if (interactive()) {   ui <- semanticPage(     flow_layout(       numericInput(\"rows\", \"How many rows?\", 5),       selectInput(\"letter\", \"Which letter?\", LETTERS),       sliderInput(\"value\", \"What value?\", 0, 100, 50)     )   )   shinyApp(ui, server = function(input, output) {}) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/form.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI form tag — form","title":"Create Semantic UI form tag — form","text":"creates form tag using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI form tag — form","text":"","code":"form(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI form tag — form","text":"... arguments added attributes tag (e.g. style, class childrens etc.) class Additional classes add html tag.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/form.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI form tag — form","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     form(       field(         tags$label(\"Text\"),         text_input(\"text_ex\", value = \"\", type = \"text\", placeholder = \"Enter Text...\")       )     ),     # loading form     form(class = \"loading form\",          field(            tags$label(\"Text\"),            text_input(\"text_ex\", value = \"\", type = \"text\", placeholder = \"Enter Text...\")          )),     # size variations mini form     form(class = \"mini\",          field(            tags$label(\"Text\"),            text_input(\"text_ex\", value = \"\", type = \"text\", placeholder = \"Enter Text...\")          )),     # massive     form(class = \"massive\",          field(            tags$label(\"Text\"),            text_input(\"text_ex\", value = \"\", type = \"text\", placeholder = \"Enter Text...\")          ))   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/generate_random_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Some elements require input id, but this does not need to be\nspecified by the user. Thus we assign random value with prefix where needed. — generate_random_id","title":"Some elements require input id, but this does not need to be\nspecified by the user. Thus we assign random value with prefix where needed. — generate_random_id","text":"elements require input id, need specified user. Thus assign random value prefix needed.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/generate_random_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some elements require input id, but this does not need to be\nspecified by the user. Thus we assign random value with prefix where needed. — generate_random_id","text":"","code":"generate_random_id(prefix, id_length = 20)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/generate_random_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some elements require input id, but this does not need to be\nspecified by the user. Thus we assign random value with prefix where needed. — generate_random_id","text":"prefix character prefix add id id_length numeric length id (default 20)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_css_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get css file — get_css_file","title":"Get css file — get_css_file","text":"Get css file","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_css_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get css file — get_css_file","text":"","code":"get_css_file(type, theme = NULL, minified = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_css_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get css file — get_css_file","text":"type define type dependencies source theme define theme minified define minified version used","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_css_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get css file — get_css_file","text":"css file name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Add dashboard dependencies to html — get_dependencies","title":"Add dashboard dependencies to html — get_dependencies","text":"Internal function adds dashboard dependencies html.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add dashboard dependencies to html — get_dependencies","text":"","code":"get_dependencies(theme = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add dashboard dependencies to html — get_dependencies","text":"theme define theme","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add dashboard dependencies to html — get_dependencies","text":"Content appended dependencies.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_dependencies_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dependencies path — get_dependencies_path","title":"Get dependencies path — get_dependencies_path","text":"Get dependencies path","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_dependencies_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dependencies path — get_dependencies_path","text":"","code":"get_dependencies_path()"},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_dependencies_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dependencies path — get_dependencies_path","text":"path css js files","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts numeric values — get_numeric","title":"Extracts numeric values — get_numeric","text":"Extracts numeric values","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts numeric values — get_numeric","text":"","code":"get_numeric(value)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts numeric values — get_numeric","text":"value Value converted numeric","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/get_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts numeric values — get_numeric","text":"Numeric value","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grapes-colon-colon-colon-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"::: hack solution to pass CRAN checks — %:::%","title":"::: hack solution to pass CRAN checks — %:::%","text":"::: hack solution pass CRAN checks","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grapes-colon-colon-colon-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"::: hack solution to pass CRAN checks — %:::%","text":"","code":"pkg %:::% name"},{"path":"https://appsilon.github.io/shiny.semantic/reference/grapes-colon-colon-colon-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"::: hack solution to pass CRAN checks — %:::%","text":"pkg package name name function name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grapes-colon-colon-colon-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"::: hack solution to pass CRAN checks — %:::%","text":"function","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Use CSS grid template in Shiny UI — grid","title":"Use CSS grid template in Shiny UI — grid","text":"Use CSS grid template Shiny UI","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use CSS grid template in Shiny UI — grid","text":"","code":"grid(   grid_template,   id = paste(sample(letters, 5), collapse = \"\"),   container_style = \"\",   area_styles = list(),   display_mode = FALSE,   ... )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use CSS grid template in Shiny UI — grid","text":"grid_template grid template created grid_template() function id id grid container_style character - string custom CSS main grid container area_styles list custom CSS styles provided area names display_mode replaces areas HTML content <area name> text. Used display_grid() function ... areas HTML content provided named arguments","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use CSS grid template in Shiny UI — grid","text":"Rendered HTML ready use Shiny UI. See htmltools::htmlTemplate() details.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use CSS grid template in Shiny UI — grid","text":"Grids can nested.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use CSS grid template in Shiny UI — grid","text":"","code":"myGrid <- grid_template(default = list(   areas = rbind(     c(\"header\", \"header\", \"header\"),     c(\"menu\",   \"main\",   \"right1\"),     c(\"menu\",   \"main\",   \"right2\")   ),   rows_height = c(\"50px\", \"auto\", \"100px\"),   cols_width = c(\"100px\", \"2fr\", \"1fr\") ))  subGrid <- grid_template(default = list(   areas = rbind(     c(\"top_left\", \"top_right\"),     c(\"bottom_left\", \"bottom_right\")   ),   rows_height = c(\"50%\", \"50%\"),   cols_width = c(\"50%\", \"50%\") ))  if (interactive()){ library(shiny) library(shiny.semantic) shinyApp(   ui = semanticPage(     grid(myGrid,          container_style = \"border: 1px solid #f00\",          area_styles = list(header = \"background: #0099f9\",                             menu = \"border-right: 1px solid #0099f9\"),          header = div(shiny::tags$h1(\"Hello CSS Grid!\")),          menu = checkbox_input(\"example\", \"Check me\", is_marked = FALSE),          main = grid(subGrid,                      top_left = calendar(\"my_calendar\"),                      top_right = div(\"hello 1\"),                      bottom_left = div(\"hello 2\"),                      bottom_right = div(\"hello 3\")          ),          right1 = div(            toggle(\"toggle\", \"let's toggle\"),            multiple_checkbox(\"mycheckbox\", \"mycheckbox\",                              c(\"option A\",\"option B\",\"option C\"))),          right2 = div(\"right 2\")     )   ),   server = shinyServer(function(input, output) {}) ) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_container_css.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate template string representing CSS styles of grid container div. — grid_container_css","title":"Generate template string representing CSS styles of grid container div. — grid_container_css","text":"Generate template string representing CSS styles grid container div.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_container_css.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate template string representing CSS styles of grid container div. — grid_container_css","text":"","code":"grid_container_css(css_grid_template_areas, rows_height, cols_width)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_container_css.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate template string representing CSS styles of grid container div. — grid_container_css","text":"css_grid_template_areas character, CSS value grid-template-areas rows_height vector character cols_width vector character","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_container_css.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate template string representing CSS styles of grid container div. — grid_container_css","text":"character","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_container_css.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate template string representing CSS styles of grid container div. — grid_container_css","text":"helper function used grid_template() returns","code":"grid_container_css(     \"'a a a' 'b b b'\",     c(\"50%\", \"50%\"),     c(\"100px\", \"2fr\", \"1fr\")   ) \"display: grid;    height: 100%;    grid-template-rows: 50% 50%;    grid-template-columns: 100px 2fr 1fr;    grid-template-areas: 'a a a' 'b b b';    {{ custom_style_grid_container }}\""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a template of a CSS grid — grid_template","title":"Define a template of a CSS grid — grid_template","text":"Define template CSS grid","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a template of a CSS grid — grid_template","text":"","code":"grid_template(default = NULL, mobile = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a template of a CSS grid — grid_template","text":"default (required) Template desktop: list(areas = [data.frame character],      rows_height = [vector character],      cols_width = [vector character]) mobile (optional) Template mobile (screen width 768px): list(areas = [data.frame character],      rows_height = [vector character],      cols_width = [vector character])","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a template of a CSS grid — grid_template","text":"list(template = [character], area_names = [vector character]) template - contains template can parsed htmlTemplate() function area_names - contains unique area names used grid definition","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/grid_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a template of a CSS grid — grid_template","text":"","code":"myGrid <- grid_template(   default = list(     areas = rbind(       c(\"header\", \"header\", \"header\"),       c(\"menu\",   \"main\",   \"right1\"),       c(\"menu\",   \"main\",   \"right2\")     ),     rows_height = c(\"50px\", \"auto\", \"100px\"),     cols_width = c(\"100px\", \"2fr\", \"1fr\")   ),   mobile = list(     areas = rbind(       \"header\",       \"menu\",       \"main\",       \"right1\",       \"right2\"     ),     rows_height = c(\"50px\", \"50px\", \"auto\", \"150px\", \"150px\"),     cols_width = c(\"100%\")   ) ) if (interactive()) display_grid(myGrid) subGrid <- grid_template(default = list(   areas = rbind(     c(\"top_left\", \"top_right\"),     c(\"bottom_left\", \"bottom_right\")   ),   rows_height = c(\"50%\", \"50%\"),   cols_width = c(\"50%\", \"50%\") ))  if (interactive()) display_grid(subGrid)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/header.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI header — header","title":"Create Semantic UI header — header","text":"creates header optional icon using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI header — header","text":"","code":"header(title, description, icon = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI header — header","text":"title Header title description Subheader text icon Optional icon name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI header — header","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     header(title = \"Header with description\", description = \"Description\"),     header(title = \"Header with icon\", description = \"Description\", icon = \"dog\")   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/horizontal_menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Horizontal menu — horizontal_menu","title":"Horizontal menu — horizontal_menu","text":"Renders UI horizontal menu","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/horizontal_menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horizontal menu — horizontal_menu","text":"","code":"horizontal_menu(menu_items, active_location = \"\", logo = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/horizontal_menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horizontal menu — horizontal_menu","text":"menu_items list list can fields: \"name\" (mandatory), \"link\" \"icon\" active_location active location menu (match one \"link\") logo optional argument displays logo left horizontal menu, can character image location, shiny image object","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/horizontal_menu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Horizontal menu — horizontal_menu","text":"shiny div horizontal menu","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/horizontal_menu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horizontal menu — horizontal_menu","text":"","code":"library(shiny.semantic) menu_content <- list(  list(name = \"AA\", link = \"http://example.com\", icon = \"dog\"),  list(name = \"BB\", link = \"#\", icon=\"cat\"),  list(name = \"CC\") ) if (interactive()){   ui <- semanticPage(    horizontal_menu(menu_content)   )   server <- function(input, output, session) {}   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI icon tag — icon","title":"Create Semantic UI icon tag — icon","text":"creates icon tag using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI icon tag — icon","text":"","code":"icon(class = \"\", ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI icon tag — icon","text":"class name icon. Look http://semantic-ui.com/elements/icon.html possibilities. ... arguments added attributes tag (e.g. style, class etc.)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI icon tag — icon","text":"","code":"if (interactive()){ library(shiny) library(shiny.semantic)  ui <- function() {   shinyUI(     semanticPage(       # Basic icon       icon(\"home\"),       br(),       # Different size       icon(\"small home\"),       icon(\"large home\"),       br(),       # Disabled icon       icon(\"disabled home\"),       br(),       # Loading icon       icon(\"spinner loading\"),       br(),       # Icon formatted as link       icon(\"close link\"),       br(),       # Flipped       icon(\"horizontally flipped cloud\"),       icon(\"vertically flipped cloud\"),       br(),       # Rotated       icon(\"clockwise rotated cloud\"),       icon(\"counterclockwise rotated cloud\"),       br(),       # Circular       icon(\"circular home\"),       br(),       # Bordered       icon(\"bordered home\"),       br(),       # Colored       icon(\"red home\"),       br(),       # inverted       segment(class = \"inverted\", icon(\"inverted home\"))     )   ) }  server <- shinyServer(function(input, output, session) {  })  shinyApp(ui = ui(), server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/label.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI label tag — label","title":"Create Semantic UI label tag — label","text":"creates div tag class ui label using Semantic UI.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI label tag — label","text":"","code":"label(..., class = \"\", is_link = TRUE)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI label tag — label","text":"... arguments added content tag (text, icons) /attributes (style) class class label. Look https://semantic-ui.com/elements/label.html possibilities. is_link TRUE creates label '' tag, otherwise 'div' tag. #'","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI label tag — label","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(     semanticPage(       ## label       label(icon = icon(\"mail icon\"), 23),       p(),       ## pointing label       field(         text_input(\"ex\", label = \"\", type = \"text\", placeholder = \"Your name\")),       label(\"Please enter a valid name\", class = \"pointing red basic\"),       p(),       ## tag       label(class = \"tag\", \"New\"),       label(class = \"red tag\", \"Upcoming\"),       label(class =\" teal tag\",\"Featured\"),       ## ribbon       segment(class = \"ui raised segment\",               label(class = \"ui red ribbon\", \"Overview\"),               \"Text\"),       ## attached       segment(class = \"ui raised segment\",               label(class = \"top attached\", \"HTML\"),               p(\"Text\"))     ))   server <- function(input, output, session) {   }   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI list with header, description and icons — list_container","title":"Create Semantic UI list with header, description and icons — list_container","text":"creates list icons using Semantic UI","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI list with header, description and icons — list_container","text":"","code":"list_container(content_list, is_divided = FALSE)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI list with header, description and icons — list_container","text":"content_list list lists fields: `header` /`description`, `icon` containing list items headers, descriptions (one mandatory) icons. Icon column contain strings icon names available : https://fomantic-ui.com/elements/icon.html is_divided TRUE created list elements divided","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_container.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI list with header, description and icons — list_container","text":"","code":"library(shiny) #>  #> Attaching package: ‘shiny’ #> The following objects are masked from ‘package:shiny.semantic’: #>  #>     Progress, actionButton, checkboxInput, dateInput, fileInput, #>     flowLayout, icon, incProgress, modalDialog, numericInput, #>     removeModal, removeNotification, selectInput, setProgress, #>     showNotification, sliderInput, splitLayout, textAreaInput, #>     textInput, updateActionButton, updateSelectInput, #>     updateSliderInput, verticalLayout, withProgress library(shiny.semantic) list_content <- list(   list(header = \"Head\", description = \"Lorem ipsum\", icon = \"cat\"),   list(header = \"Head 2\", icon = \"tree\"),   list(description = \"Lorem ipsum 2\", icon = \"dog\") ) if (interactive()){   ui <- semanticPage(     list_container(list_content, is_divided = TRUE)  )   server <- function(input, output) {}   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to render list element — list_element","title":"Helper function to render list element — list_element","text":"Helper function render list element","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to render list element — list_element","text":"","code":"list_element(header = NULL, description = NULL, icon_name = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to render list element — list_element","text":"header character header element description character content list icon_name character optional icon","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_of_area_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate list of HTML div elements representing grid areas. — list_of_area_tags","title":"Generate list of HTML div elements representing grid areas. — list_of_area_tags","text":"Generate list HTML div elements representing grid areas.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_of_area_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate list of HTML div elements representing grid areas. — list_of_area_tags","text":"","code":"list_of_area_tags(area_names)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_of_area_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate list of HTML div elements representing grid areas. — list_of_area_tags","text":"area_names vector area names","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_of_area_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate list of HTML div elements representing grid areas. — list_of_area_tags","text":"list shiny::tags$div","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/list_of_area_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate list of HTML div elements representing grid areas. — list_of_area_tags","text":"helper function used grid_template() returns following list:","code":"list_of_area_tags(c(\"header\", \"main\", \"footer\")) [[1]] <div id=\"{{ grid_id }}-header\" style=\"grid-area: header; {{ header_custom_css }}\">{{ header }}<\/div>   [[2]] <div id=\"{{ grid_id }}-main\" style=\"grid-area: main; {{ main_custom_css }}\">{{ main }}<\/div>   [[3]] <div id=\"{{ grid_id }}-footer\" style=\"grid-area: footer; {{ footer_custom_css }}\">{{ footer }}<\/div>"},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Menu — menu","title":"Create Semantic UI Menu — menu","text":"creates menu using Semantic UI.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Menu — menu","text":"","code":"menu(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Menu — menu","text":"... Menu items created. Use menu_item function create new menu item. Use dropdown_menu(is_menu_item = TRUE, ...) function create new dropdown menu item. Use menu_header menu_divider functions customize menu format. class Class extension.Look https://semantic-ui.com/collections/menu.html possibilities.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Menu — menu","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   library(shiny)   library(shiny.semantic)    ui <- function() {     shinyUI(       semanticPage(         title = \"My page\",         menu(menu_item(\"Menu\"),              dropdown_menu(                \"Action\",                menu(                  menu_header(icon(\"file\"), \"File\", is_item = FALSE),                  menu_item(icon(\"wrench\"), \"Open\"),                  menu_item(icon(\"upload\"), \"Upload\"),                  menu_item(icon(\"remove\"), \"Upload\"),                  menu_divider(),                  menu_header(icon(\"user\"), \"User\", is_item = FALSE),                  menu_item(icon(\"add user\"), \"Add\"),                  menu_item(icon(\"remove user\"), \"Remove\")),                class = \"\",                name = \"unique_name\",                is_menu_item = TRUE),              menu_item(icon(\"user\"), \"Profile\", href = \"#index\", item_feature = \"active\"),              menu_item(\"Projects\", href = \"#projects\"),              menu_item(icon(\"users\"), \"Team\"),              menu(menu_item(icon(\"add icon\"), \"New tab\"), class = \"right\"))       )     )   }   server <- shinyServer(function(input, output) {})   shinyApp(ui = ui(), server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_divider.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Divider Item — menu_divider","title":"Create Semantic UI Divider Item — menu_divider","text":"creates menu divider item using Semantic UI.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_divider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Divider Item — menu_divider","text":"","code":"menu_divider(...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_divider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Divider Item — menu_divider","text":"... attributes divider style.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Header Item — menu_header","title":"Create Semantic UI Header Item — menu_header","text":"creates dropdown header item using Semantic UI.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Header Item — menu_header","text":"","code":"menu_header(..., is_item = TRUE)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Header Item — menu_header","text":"... Content header: text, icons, etc. is_item TRUE created header item Semantic UI Menu.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Menu Item — menu_item","title":"Create Semantic UI Menu Item — menu_item","text":"creates menu item using Semantic UI","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Menu Item — menu_item","text":"","code":"menu_item(..., item_feature = \"\", style = NULL, href = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/menu_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Menu Item — menu_item","text":"... Content menu item: text, icons labels displayed. item_feature required, add additional item feature like 'active', 'header', etc. style Style item, e.g. \"text-align: center\". href NULL (default) menu_item created 'div' tag. Otherwise created '' tag, parameeter defines href attribute.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/message_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Message box — message_box","title":"Create Semantic UI Message box — message_box","text":"Create Semantic UI Message box","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/message_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Message box — message_box","text":"","code":"message_box(header, content, class = \"\", icon_name, closable = FALSE)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/message_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Message box — message_box","text":"header Header message box content Content message box . vector, creates list vector's elements class class message. Look https://semantic-ui.com/collections/message.html possibilities. icon_name message type 'icon', specify icon. Look http://semantic-ui.com/elements/icon.html possibilities. closable Determines whether message closable. Default FALSE - closable","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/message_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Message box — message_box","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     message_box(header = \"Main header\", content = \"text\"),     # message with icon     message_box(class = \"icon\", header = \"Main header\", content = \"text\", icon_name = \"dog\"),     # closable message     message_box(header = \"Main header\", content = \"text\", closable =  TRUE),     # floating     message_box(class = \"floating\", header = \"Main header\", content = \"text\"),     # compact     message_box(class = \"compact\", header = \"Main header\", content = \"text\"),     # warning     message_box(class = \"warning\", header = \"Warning\", content = \"text\"),     # info     message_box(class = \"info\", header = \"Info\", content = \"text\")   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI modal — modal","title":"Create Semantic UI modal — modal","text":"creates modal using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI modal — modal","text":"","code":"modal(   ...,   id = \"\",   class = \"\",   header = NULL,   content = NULL,   footer = div(class = \"ui button positive\", \"OK\"),   target = NULL,   settings = NULL,   modal_tags = NULL )  modalDialog(..., title = NULL, footer = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI modal — modal","text":"... Content elements added modal body. change attributes container please check `content` argument. id ID added modal div. Default \"\". class Classes except \"ui modal\" added modal. Semantic UI classes can used. Default \"\". header Content displayed modal header. given form list, HTML attributes container can also changed. Default \"\". content Content displayed modal body. given form list, HTML attributes container can also changed. Default NULL. footer Content displayed modal footer. Usually buttons. given form list, HTML attributes container can also changed. Set NULL, make empty. target Javascript selector element open modal. Default NULL. settings list vectors Semantic UI settings added modal. Default NULL. modal_tags character title modalDialog - equivalent header title title displayed header modalDialog","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/modal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI modal — modal","text":"","code":"## Create a simple server modal if (interactive()) { library(shiny) library(shiny.semantic)  ui <- function() {   shinyUI(     semanticPage(       actionButton(\"show\", \"Show modal dialog\")     )   ) }  server = function(input, output) {   observeEvent(input$show, {     create_modal(modal(       id = \"simple-modal\",       header = h2(\"Important message\"),       \"This is an important message!\"     ))   }) } shinyApp(ui, server) } ## Create a simple UI modal  if (interactive()) { library(shiny) library(shiny.semantic) ui <- function() {   shinyUI(     semanticPage(       title = \"Modal example - Static UI modal\",       div(id = \"modal-open-button\", class = \"ui button\", \"Open Modal\"),       modal(         div(\"Example content\"),         id = \"example-modal\",         target = \"modal-open-button\"       )     )   ) }  ## Observe server side actions library(shiny) library(shiny.semantic) ui <- function() {   shinyUI(     semanticPage(       title = \"Modal example - Server side actions\",       uiOutput(\"modalAction\"),       actionButton(\"show\", \"Show by calling show_modal\")     )   ) }  server <- shinyServer(function(input, output) {   observeEvent(input$show, {     show_modal('action-example-modal')   })   observeEvent(input$hide, {     hide_modal('action-example-modal')   })    output$modalAction <- renderUI({     modal(       actionButton(\"hide\", \"Hide by calling hide_modal\"),       id = \"action-example-modal\",       header = \"Modal example\",       footer = \"\",       class = \"tiny\"     )   }) }) shinyApp(ui, server) }  ## Changing attributes of header and content. if (interactive()) { library(shiny) library(shiny.semantic)  ui <- function() {   shinyUI(     semanticPage(       actionButton(\"show\", \"Show modal dialog\")     )   ) }  server = function(input, output) {   observeEvent(input$show, {     create_modal(modal(       id = \"simple-modal\",       title = \"Important message\",       header = list(\"!!!\", style = \"background: lightcoral\"),       content = list(style = \"background: lightblue\",                      `data-custom` = \"value\", \"This is an important message!\"),       p(\"This is also part of the content!\")     ))   }) } shinyApp(ui, server) }  ## Modal that closes automatically after specific time if (interactive()) { library(shiny) library(shiny.semantic) ui <- function() {   shinyUI(     semanticPage(       actionButton(\"show\", \"Show modal dialog\")     )   ) }  server <- shinyServer(function(input, output, session) {   observeEvent(input$show, {     create_modal(       modal(         id = \"simple-modal\",         title = \"Important message\",         header = \"Example modal\",         content = \"This modal will close after 3 sec.\",         footer = NULL,       )     )     Sys.sleep(3)     hide_modal(id = \"simple-modal\")   }) })  shinyApp(ui = ui(), server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/multiple_checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI multiple checkbox — multiple_checkbox","title":"Create Semantic UI multiple checkbox — multiple_checkbox","text":"creates multiple checkbox using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/multiple_checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI multiple checkbox — multiple_checkbox","text":"","code":"multiple_checkbox(   input_id,   label,   choices,   choices_value = choices,   selected = NULL,   position = \"grouped\",   type = NULL,   ... )  multiple_radio(   input_id,   label,   choices,   choices_value = choices,   selected = choices_value[1],   position = \"grouped\",   type = \"radio\",   ... )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/multiple_checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI multiple checkbox — multiple_checkbox","text":"input_id Input name. Reactive value available input[[input_id]]. label Text displayed checkbox. choices Vector labels show checkboxes . choices_value Vector values used corresponding choice. specified, choices used default. selected value(s) chosen initially. NULL first one choices chosen. position Specified checkmarks setup. Can grouped inline. type Type checkbox radio. ... arguments added attributes tag (e.g. style, childrens etc.)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/multiple_checkbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Semantic UI multiple checkbox — multiple_checkbox","text":"following types allowed: NULLThe standard checkbox (default) toggleEach checkbox toggle form sliderEach checkbox simple slider form","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/multiple_checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI multiple checkbox — multiple_checkbox","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   # Checkbox   library(shiny)   library(shiny.semantic)    ui <- function() {       shinyUI(         semanticPage(           title = \"Checkbox example\",           h1(\"Checkboxes\"),           multiple_checkbox(\"checkboxes\", \"Select Letters\", LETTERS[1:6], selected = \"A\"),           p(\"Selected letters:\"),           textOutput(\"selected_letters\"),           tags$br(),           h1(\"Radioboxes\"),           multiple_radio(\"radioboxes\", \"Select Letter\", LETTERS[1:6], selected = \"A\"),           p(\"Selected letter:\"),           textOutput(\"selected_letter\")        )      )   }    server <- shinyServer(function(input, output) {      output$selected_letters <- renderText(paste(input$checkboxes, collapse = \", \"))      output$selected_letter <- renderText(input$radioboxes)   })    shinyApp(ui = ui(), server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/numeric_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Numeric Input — numeric_input","title":"Create Semantic UI Numeric Input — numeric_input","text":"creates default numeric input using Semantic UI. input available input[[input_id]].","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/numeric_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Numeric Input — numeric_input","text":"","code":"numeric_input(   input_id,   label,   value = NULL,   min = NA,   max = NA,   step = NA,   type = NULL,   icon = NULL,   placeholder = NULL,   ... )  numericInput(   inputId,   label,   value = NULL,   min = NA,   max = NA,   step = NA,   width = NULL,   placeholder = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/numeric_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Numeric Input — numeric_input","text":"input_id Input name. Reactive value available input[[input_id]]. label Display label control, NULL label. value Initial value numeric input. min Minimum allowed value. max Maximum allowed value. step Interval use stepping min max. type Input type specifying class attached input container. See [Fomantic UI](https://fomantic-ui.com/collections/form.html) details. icon Icon label attached numeric input. placeholder Inner input label displayed value specified ... parameters passed numeric_input like type icon. inputId input slot used access value. width width input.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/numeric_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Semantic UI Numeric Input — numeric_input","text":"Either `value` `placeholder` defined. inputs updateable using updateNumericInput.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/numeric_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Numeric Input — numeric_input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   library(shiny)   library(shiny.semantic)   ui <- semanticPage(     numeric_input(\"ex\", \"Select number\", 10),   )   server <- function(input, output, session) {}   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/parse_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse the `shiny_input` value from JSON — parse_val","title":"Parse the `shiny_input` value from JSON — parse_val","text":"Parse `shiny_input` value JSON","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/parse_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse the `shiny_input` value from JSON — parse_val","text":"","code":"parse_val(val)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/parse_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse the `shiny_input` value from JSON — parse_val","text":"val value get JSON","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/parse_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse the `shiny_input` value from JSON — parse_val","text":"Value type defined `shiny_input`","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Create progress Semantic UI component — progress","title":"Create progress Semantic UI component — progress","text":"creates default progress using Semantic UI styles Shiny input. Progress already initialized available input[[input_id]].","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create progress Semantic UI component — progress","text":"","code":"progress(   input_id,   value = NULL,   total = NULL,   percent = NULL,   progress_lab = FALSE,   label = NULL,   label_complete = NULL,   size = \"\",   class = NULL )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create progress Semantic UI component — progress","text":"input_id Input name. Reactive value available input[[input_id]]. value initial value selected progress bar. total maximum value applied progress bar. percent initial percentage selected progress bar. progress_lab Logical, like percentage visible progress bar? label label visible underneath progress bar. label_complete label visible underneath progress bar bar 100%. size character legal semantic size, eg. \"medium\", \"huge\", \"tiny\" class UI class progress bar.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create progress Semantic UI component — progress","text":"initialize progress bar, can either choose value total, percent.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create progress Semantic UI component — progress","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {    library(shiny)   library(shiny.semantic)   ui <- function() {       shinyUI(         semanticPage(           title = \"Progress example\",           progress(\"progress\", percent = 24, label = \"{percent}% complete\"),           p(\"Progress completion:\"),           textOutput(\"progress\")        )      )   }   server <- shinyServer(function(input, output) {      output$progress <- renderText(input$progress)   })    shinyApp(ui = ui(), server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/rating_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Rating Input. — rating_input","title":"Rating Input. — rating_input","text":"Crates rating component","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/rating_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rating Input. — rating_input","text":"","code":"rating_input(   input_id,   label = \"\",   value = 0,   max = 3,   icon = \"star\",   color = \"yellow\",   size = \"\" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/rating_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rating Input. — rating_input","text":"input_id input slot used access value. label contents item display value initial rating value max maximum value icon character name icon icon() element rating color character colour name size character legal semantic size, eg. \"medium\", \"huge\", \"tiny\"","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/rating_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rating Input. — rating_input","text":"rating object","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/rating_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rating Input. — rating_input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   library(shiny)   library(shiny.semantic)    ui <- shinyUI(     semanticPage(       rating_input(\"rate\", \"How do you like it?\", max = 5,                    icon = \"heart\", color = \"yellow\"),     )   )   server <- function(input, output) {     observeEvent(input$rate,{print(input$rate)})   }   shinyApp(ui = ui, server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/register_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Register search api url — register_search","title":"Register search api url — register_search","text":"Calls Shiny session's registerDataObj create REST API. Publishes R object URL endpoint unique Shiny session. search_query must function takes two arguments: data (value passed registerDataObj) req (environment implements Rook specification HTTP requests). search_query called values whenever HTTP request made URL endpoint. return value search_query list list dataframe. Note different semantic components expect specific JSON fields present order work correctly. Check components documentation details.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/register_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register search api url — register_search","text":"","code":"register_search(session, data, search_query)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/register_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register search api url — register_search","text":"session Shiny server session data Data (value passed registerDataObj) search_query Function providing response list lists dataframe search results.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/register_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register search api url — register_search","text":"","code":"if (interactive()) {   library(shiny)   library(tibble)   library(shiny.semantic)   shinyApp(     ui = semanticPage(       textInput(\"txt\", \"Enter the car name (or subset of name)\"),       textOutput(\"api_url\"),       uiOutput(\"open_url\")     ),     server = function(input, output, session) {       api_response <- function(data, q) {         has_matching <- function(field) {           grepl(toupper(q), toupper(field), fixed = TRUE)         }         dplyr::filter(data, has_matching(car))       }        search_api_url <- register_search(session,                            tibble::rownames_to_column(mtcars, \"car\"), api_response)        output$api_url <- renderText({        glue::glue(         \"Registered API url: \",         \"{session$clientData$url_protocol}//{session$clientData$url_hostname}\",         \":{session$clientData$url_port}/\",         \"{search_api_url}&q={input$txt}\"         )       })        output$open_url <- renderUI({         tags$a(           \"Open\", class = \"ui button\",           href = glue::glue(\"./{search_api_url}&q={input$txt}\"), target = \"_blank\"         )       })     }   ) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/render_menu_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Render menu link — render_menu_link","title":"Render menu link — render_menu_link","text":"function renders horizontal menu item.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/render_menu_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render menu link — render_menu_link","text":"","code":"render_menu_link(location, title, active_location = \"\", icon = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/render_menu_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render menu link — render_menu_link","text":"location character url location title name page active_location name active subpage (matches location gets highlighted), default empty (\"\") icon non-mandatory parameter icon name","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/render_menu_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render menu link — render_menu_link","text":"shiny tag link","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/render_menu_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render menu link — render_menu_link","text":"","code":"render_menu_link(\"#subpage1\", \"SUBPAGE\") #> <a class=\"item\" href=\"#subpage1\"> #>    #>   SUBPAGE #> <\/a>"},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create search field Semantic UI component — search_field","title":"Create search field Semantic UI component — search_field","text":"creates default search field using Semantic UI styles Shiny input. Search field already initialized available input[[input_id]]. Search automatically route named API endpoint provided parameter. API response expected JSON property fields `title` `description`. See https://semantic-ui.com/modules/search.html#behaviors details.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create search field Semantic UI component — search_field","text":"","code":"search_field(input_id, search_api_url, default_text = \"Search\", value = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create search field Semantic UI component — search_field","text":"input_id Input name. Reactive value available input[[input_id]]. search_api_url Register custom API url server JSON Response containing fields `title` `description`. default_text Text visible serach field nothing selected. value Pass value want initialize selection search field.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create search field Semantic UI component — search_field","text":"","code":"## Only run examples in interactive R sessions if (FALSE) { if (interactive()) { library(shiny) library(shiny.semantic) library(gapminder) library(dplyr)  ui <- function() {   shinyUI(     semanticPage(       title = \"Dropdown example\",       p(\"Search country:\"),       uiOutput(\"search_country\"),       p(\"Selected country:\"),       textOutput(\"selected_country\")    )   ) }  server <- shinyServer(function(input, output, session) {   search_api <- function(gapminder, q) {    has_matching <- function(field) {      startsWith(field, q)    }    gapminder %>%      mutate(country = as.character(country)) %>%      select(country) %>%      unique %>%      filter(has_matching(country)) %>%      head(5) %>%      transmute(title = country,                description = country)  }   search_api_url <- register_search(session, gapminder, search_api)  output$search_letters <- shiny::renderUI(    search_field(\"search_result\", search_api_url)  )  output$selected_country <- renderText(input[[\"search_result\"]]) }) }  shinyApp(ui = ui(), server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_selection_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Semantic UI search selection dropdown based on REST API — search_selection_api","title":"Add Semantic UI search selection dropdown based on REST API — search_selection_api","text":"Define (multiple) search selection dropdown input retrieving remote selection menu content API endpoint. API response expected JSON property fields `name` `value`. Using search selection dropdown allows search easily large lists.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_selection_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Semantic UI search selection dropdown based on REST API — search_selection_api","text":"","code":"search_selection_api(   input_id,   search_api_url,   multiple = FALSE,   default_text = \"Select\" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_selection_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Semantic UI search selection dropdown based on REST API — search_selection_api","text":"input_id Input name. Reactive value available input[[input_id]]. search_api_url Register API url server JSON Response containing fields `name` `value`. multiple TRUE dropdown allow multiple selections, FALSE otherwise (default FALSE). default_text Text visible dropdown nothing selected. #'@examples ## run examples interactive R sessions (interactive())     library(shiny)    library(shiny.semantic)    library(gapminder)    library(dplyr)   ui <- function()      shinyUI(       semanticPage(         title = \"Dropdown example\",         uiOutput(\"search_letters\"),         p(\"Selected letter:\"),         textOutput(\"selected_letters\")       )     )  server <- shinyServer(function(input, output, session)    search_api <- function(gapminder, q)       has_matching <- function(field)          startsWith(field, q)      gapminder          mutate(country = .character(country))          select(country)          unique          filter(has_matching(country))          head(5)            transmute(name = country,                   value = country)    search_api_url <- shiny.semantic::register_search(session,                                                       gapminder,                                                       search_api)     output$search_letters <- shiny::renderUI(       search_selection_api(\"search_result\", search_api_url, multiple = TRUE)     )     output$selected_letters <- renderText(input[[\"search_result\"]])   )  shinyApp(ui = ui(), server = server)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_selection_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Semantic UI search selection dropdown based on provided choices — search_selection_choices","title":"Add Semantic UI search selection dropdown based on provided choices — search_selection_choices","text":"Define (multiple) search selection dropdown input component serving search options using provided choices.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_selection_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Semantic UI search selection dropdown based on provided choices — search_selection_choices","text":"","code":"search_selection_choices(   input_id,   choices,   value = NULL,   multiple = FALSE,   default_text = \"Select\",   groups = NULL,   dropdown_settings = list(forceSelection = FALSE) )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_selection_choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Semantic UI search selection dropdown based on provided choices — search_selection_choices","text":"input_id Input name. Reactive value available input[[input_id]]. choices Vector list choices search . value String default values set initialize component. Values delimited comma multiple set. Default NULL. multiple TRUE dropdown allow multiple selections, FALSE otherwise (default FALSE). default_text Text visible dropdown nothing selected. groups Vector length equal choices, specifying group choice belongs. Specifying parameter enables group dropdown search implementation. dropdown_settings Settings passed dropdown() semantic-ui method. See https://semantic-ui.com/modules/dropdown.html#/settings","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/search_selection_choices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Semantic UI search selection dropdown based on provided choices — search_selection_choices","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   library(shiny)   library(shiny.semantic)    ui <- function() {     shinyUI(       semanticPage(         title = \"Dropdown example\",         uiOutput(\"search_letters\"),         p(\"Selected letter:\"),         textOutput(\"selected_letters\")       )     )   }    server <- shinyServer(function(input, output, session) {     choices <- LETTERS     output$search_letters <- shiny::renderUI(       search_selection_choices(\"search_result\", choices, multiple = TRUE)     )     output$selected_letters <- renderText(input[[\"search_result\"]])   })    shinyApp(ui = ui(), server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI segment — segment","title":"Create Semantic UI segment — segment","text":"creates segment using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI segment — segment","text":"","code":"segment(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI segment — segment","text":"... arguments added attributes tag (e.g. style, class childrens etc.) class Additional classes add html tag.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI segment — segment","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- shinyUI(semanticPage(     segment(),     # placeholder     segment(class = \"placeholder segment\"),     # raised     segment(class = \"raised segment\"),     # stacked     segment(class = \"stacked segment\"),     #  piled     segment(class = \"piled segment\")   ))   server <- shinyServer(function(input, output) {   })    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/selectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a select list input control — selectInput","title":"Create a select list input control — selectInput","text":"Create select list can used choose single multiple items list values.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/selectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a select list input control — selectInput","text":"","code":"selectInput(   inputId,   label,   choices,   selected = NULL,   multiple = FALSE,   width = NULL,   ... )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/selectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a select list input control — selectInput","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select . elements list named, name — rather value — displayed user. selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. multiple selection multiple items allowed? width width input. ... Arguments passed dropdown_input.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/selectInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a select list input control — selectInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {    library(shiny.semantic)    # basic example   shinyApp(     ui = semanticPage(       selectInput(\"variable\", \"Variable:\",                   c(\"Cylinders\" = \"cyl\",                     \"Transmission\" = \"am\",                     \"Gears\" = \"gear\")),       tableOutput(\"data\")     ),     server = function(input, output) {       output$data <- renderTable({         mtcars[, c(\"mpg\", input$variable), drop = FALSE]       }, rownames = TRUE)     }   ) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/semanticPage.html","id":null,"dir":"Reference","previous_headings":"","what":"Semantic UI page — semanticPage","title":"Semantic UI page — semanticPage","text":"creates Semantic page use Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/semanticPage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Semantic UI page — semanticPage","text":"","code":"semanticPage(   ...,   title = \"\",   theme = NULL,   suppress_bootstrap = TRUE,   margin = \"10px\" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/semanticPage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Semantic UI page — semanticPage","text":"... arguments added attributes main div tag wrapper (e.g. style, class etc.) title title display browser's title bar. theme Theme name path. Full list supported themes find semantic.assets::SUPPORTED_THEMES http://semantic-ui-forest.com/themes. suppress_bootstrap boolean flag supresses bootstrap turned margin character body margin size","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/semanticPage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Semantic UI page — semanticPage","text":"Inside, uses two crucial options: (1) shiny.minified logical value, tells whether attach min full semnatic css js (TRUE default). (2) shiny.custom.semantic option NULL character semanticPage takes dependencies custom css js files specified path (NULL default). Depending shiny.minified value folder contain either \"min\" standard version. folder contain: semantic.css semantic.js files, semantic.min.css semantic.min.js shiny.minified = TRUE mode.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/semanticPage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Semantic UI page — semanticPage","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { library(shiny) library(shiny.semantic)  ui <- semanticPage(   title = \"Hello Shiny Semantic!\",   tags$label(\"Number of observations:\"),   slider_input(\"obs\", value = 500, min = 0, max = 1000),   segment(     plotOutput(\"dist_plot\")   ) )  server <- function(input, output) {   output$dist_plot <- renderPlot({     hist(rnorm(input$obs))   }) }  shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic DT Table — semantic_DT","title":"Create Semantic DT Table — semantic_DT","text":"creates DT table styled Semantic UI.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic DT Table — semantic_DT","text":"","code":"semantic_DT(..., options = list())"},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic DT Table — semantic_DT","text":"... datatable parameters, check ?DT::datatable learn . options datatable options, check ?DT::datatable learn .","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic DT Table — semantic_DT","text":"","code":"if (interactive()){  library(shiny)  library(shiny.semantic)   ui <- semanticPage(    semantic_DTOutput(\"table\")  )  server <- function(input, output, session) {    output$table <- DT::renderDataTable(      semantic_DT(iris)    )  }  shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DTOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Semantic DT Output — semantic_DTOutput","title":"Semantic DT Output — semantic_DTOutput","text":"Semantic DT Output","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DTOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Semantic DT Output — semantic_DTOutput","text":"","code":"semantic_DTOutput(...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DTOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Semantic DT Output — semantic_DTOutput","text":"... datatable parameters, check ?DT::datatable learn .","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/semantic_DTOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Semantic DT Output — semantic_DTOutput","text":"DT Output semanitc style","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/set_tab_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets tab id if not provided — set_tab_id","title":"Sets tab id if not provided — set_tab_id","text":"Sets tab id provided","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/set_tab_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets tab id if not provided — set_tab_id","text":"","code":"set_tab_id(tab)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/set_tab_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets tab id if not provided — set_tab_id","text":"tab tab. Tab list three elements - first element defines menu item, second element defines tab content, third optional element defines tab id.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny.semantic.html","id":null,"dir":"Reference","previous_headings":"","what":"Semantic UI wrapper for Shiny — shiny.semantic","title":"Semantic UI wrapper for Shiny — shiny.semantic","text":"library ’s easy wrap Shiny Semantic UI components. Add simple lines code CSS classes give UI fresh, modern highly interactive look.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny.semantic.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"Semantic UI wrapper for Shiny — shiny.semantic","text":"number global options affect shiny.semantic well Shiny behavior.options can set globally `options()` shiny.custom.semantic.cdn (defaults `NULL`) controls css javascripts downloaded. shiny.custom.semantic (defaults `NULL`) allows set custom local path semantic dependencies. shiny.minified (defaults `TRUE`) Defines including JavaScript minified un-minified file.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create universal Shiny input binding — shiny_input","title":"Create universal Shiny input binding — shiny_input","text":"Universal binding Shiny input custom user interface. Using function one can create various inputs ranging text, numerical, date, dropdowns, etc. Value input extracted via jQuery using $().val() function default exposed serialized JSON Shiny server. want change type exposed input value specify via type param. Currently list supported types \"JSON\" (default) \"text\".","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create universal Shiny input binding — shiny_input","text":"","code":"shiny_input(input_id, shiny_ui, value = NULL, type = \"JSON\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create universal Shiny input binding — shiny_input","text":"input_id String name input. Access input within server code normal input[[input_id]]. shiny_ui UI HTML component presenting input users. UI allow extract value jQuery $().val() function. value optional argument value set input. Can used store persisten input valus dynamic UIs. type Type input value (\"JSON\" \"text\").","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create universal Shiny input binding — shiny_input","text":"","code":"library(shiny) library(shiny.semantic) # Create a week field uirender(   tagList(     div(class = \"ui icon input\",         style = NULL,         \"\",         shiny_input(           \"my_id\",           tags$input(type = \"week\", name = \"my_id\", min = NULL, max = NULL),           value = NULL,           type = \"text\"),         icon(\"calendar\"))   ) )  {\"x\":{\"ui\":\"<div class=\\\"ui icon input\\\">\\n  \\n  <input type=\\\"week\\\" name=\\\"my_id\\\" class=\\\"shiny-custom-input \\\" id=\\\"my_id\\\" data-value-type=\\\"text\\\"/>\\n  <i class=\\\"far fa-calendar\\\" role=\\\"presentation\\\" aria-label=\\\"calendar icon\\\"><\\/i>\\n<\\/div>\",\"shiny_custom_semantic\":\"/home/runner/work/_temp/Library/semantic.assets/www/shared/semantic\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_text_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create universal Shiny text input binding — shiny_text_input","title":"Create universal Shiny text input binding — shiny_text_input","text":"Universal binding Shiny text input custom user interface. Value input extracted via jQuery using $().val() function. function just simple binding shiny_input. Please take look shiny_input documentation information.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_text_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create universal Shiny text input binding — shiny_text_input","text":"","code":"shiny_text_input(...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_text_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create universal Shiny text input binding — shiny_text_input","text":"... Possible arguments shiny_input() method: input_id, shiny_ui, value. Type already predefined \"text\"","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/shiny_text_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create universal Shiny text input binding — shiny_text_input","text":"","code":"library(shiny) library(shiny.semantic) # Create a color picker uirender(   tagList(     div(class = \"ui input\",         style = NULL,         \"Color picker\",         shiny_text_input(           \"my_id\",           tags$input(type = \"color\", name = \"my_id\", value = \"#ff0000\"))     )   ))  {\"x\":{\"ui\":\"<div class=\\\"ui input\\\">\\n  Color picker\\n  <input type=\\\"color\\\" name=\\\"my_id\\\" value=\\\"#ff0000\\\" class=\\\"shiny-custom-input \\\" id=\\\"my_id\\\" data-value-type=\\\"text\\\"/>\\n<\\/div>\",\"shiny_custom_semantic\":\"/home/runner/work/_temp/Library/semantic.assets/www/shared/semantic\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://appsilon.github.io/shiny.semantic/reference/show_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Show, Hide or Remove Semantic UI modal — show_modal","title":"Show, Hide or Remove Semantic UI modal — show_modal","text":"displays hidden Semantic UI modal.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/show_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show, Hide or Remove Semantic UI modal — show_modal","text":"","code":"show_modal(id, session = shiny::getDefaultReactiveDomain(), asis = TRUE)  remove_modal(id, session = shiny::getDefaultReactiveDomain(), asis = TRUE)  remove_all_modals(session = shiny::getDefaultReactiveDomain())  removeModal(session = shiny::getDefaultReactiveDomain())  hide_modal(id, session = shiny::getDefaultReactiveDomain(), asis = TRUE)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/show_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show, Hide or Remove Semantic UI modal — show_modal","text":"id ID modal displayed. session session object passed function given shinyServer. asis boolean indicating id must handled (TRUE) FALSE meants namespaced","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/sidebar_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates div containing children elements of sidebar panel — sidebar_panel","title":"Creates div containing children elements of sidebar panel — sidebar_panel","text":"Creates div containing children elements sidebar panel Creates div containing children elements main panel Creates grid layout composed sidebar main panels","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/sidebar_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates div containing children elements of sidebar panel — sidebar_panel","text":"","code":"sidebar_panel(..., width = 1)  main_panel(..., width = 3)  sidebar_layout(   sidebar_panel,   main_panel,   mirrored = FALSE,   min_height = \"auto\",   container_style = \"\",   area_styles = list(sidebar_panel = \"\", main_panel = \"\") )  sidebarPanel(..., width = 6)  mainPanel(..., width = 10)  sidebarLayout(   sidebarPanel,   mainPanel,   position = c(\"left\", \"right\"),   fluid = TRUE )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/sidebar_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates div containing children elements of sidebar panel — sidebar_panel","text":"... Container's children elements width Width main panel container relative value sidebar_panel Sidebar panel component main_panel Main panel component mirrored TRUE sidebar located right side, FALSE - left side (default) min_height Sidebar layout container keeps minimum height, specified. formatted string css units container_style CSS declarations grid container area_styles List CSS declarations grid area inside sidebarPanel sidebar_panel mainPanel main_panel position vector position sidebar elements order sidebar, main fluid TRUE use fluid layout; FALSE use fixed layout.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/sidebar_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates div containing children elements of sidebar panel — sidebar_panel","text":"Container sidebar main panels","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/sidebar_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates div containing children elements of sidebar panel — sidebar_panel","text":"","code":"if (interactive()){   library(shiny)   library(shiny.semantic)   ui <- semanticPage(     titlePanel(\"Hello Shiny!\"),     sidebar_layout(       sidebar_panel(         shiny.semantic::sliderInput(\"obs\",                                     \"Number of observations:\",                                     min = 0,                                     max = 1000,                                     value = 500),                                     width = 3       ),       main_panel(         plotOutput(\"distPlot\"),         width = 4       ),       mirrored = TRUE     )   )   server <- function(input, output) {     output$distPlot <- renderPlot({       hist(rnorm(input$obs))     })   }   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/single_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a single step to be used inside of a list of steps by the steps\nfunction — single_step","title":"Creates a single step to be used inside of a list of steps by the steps\nfunction — single_step","text":"Creates single step used inside list steps steps function","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/single_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a single step to be used inside of a list of steps by the steps\nfunction — single_step","text":"","code":"single_step(   id,   title,   description = NULL,   icon_class = NULL,   step_class = NULL )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/single_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a single step to be used inside of a list of steps by the steps\nfunction — single_step","text":"id input slot used access value. title character title ste description character fill description step icon_class character correpond fomantic icon class used step step_class character representing class passed step","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/slider.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Slider / Range — slider_input","title":"Create Semantic UI Slider / Range — slider_input","text":"creates slider input using Semantic UI. Slider already initialized available input[[input_id]]. Use Range range values.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/slider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Slider / Range — slider_input","text":"","code":"slider_input(   input_id,   value,   min,   max,   step = 1,   class = \"labeled\",   custom_ticks = NULL )  sliderInput(   inputId,   label,   min,   max,   value,   step = 1,   width = NULL,   ticks = TRUE,   ... )  range_input(input_id, value, value2, min, max, step = 1, class = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/slider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Slider / Range — slider_input","text":"input_id Input name. Reactive value available input[[input_id]]. value initial value selected sldier (lower value using range). min minimum value allowed selected slider. max maximum value allowed selected slider. step interval selectable value slider. class UI class slider. Can include \"labeled\" \"ticked\". custom_ticks vector custom labels added slider. ignore min max inputId Input name. label Display label control, NULL label. width character width slider. ticks FALSE hide tick marks, TRUE show according simple heuristics ... additional arguments value2 initial upper value slider.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/slider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Semantic UI Slider / Range — slider_input","text":"Use update_slider update slider/range within shiny session.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/slider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Slider / Range — slider_input","text":"","code":"if (interactive()) {   # Slider example   library(shiny)   library(shiny.semantic)    ui <- shinyUI(     semanticPage(       title = \"Slider example\",       tags$br(),       slider_input(\"slider\", 10, 0, 20, class = \"labeled ticked\"),       p(\"Selected value:\"),       textOutput(\"slider\")     )   )   server <- shinyServer(function(input, output, session) {     output$slider <- renderText(input$slider)   })   shinyApp(ui = ui, server = server)    # Custom ticks slider   ui <- shinyUI(     semanticPage(       title = \"Slider example\",       tags$br(),       slider_input(\"slider_ticks\", \"F\", custom_ticks = LETTERS, class = \"labeled ticked\"),       p(\"Selected value:\"),       textOutput(\"slider_ticks\")     )   )   server <- shinyServer(function(input, output, session) {     output$slider_ticks <- renderText(input$slider_ticks)   })   shinyApp(ui = ui, server = server)    # Range example   ui <- shinyUI(     semanticPage(       title = \"Range example\",       tags$br(),       range_input(\"range\", 10, 15, 0, 20),       p(\"Selected values:\"),       textOutput(\"range\")     )   )   server <- shinyServer(function(input, output, session) {     output$range <- renderText(paste(input$range, collapse = \" - \"))   })   shinyApp(ui = ui, server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Split arguments to positional and named — split_args","title":"Split arguments to positional and named — split_args","text":"Split arguments positional named","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split arguments to positional and named — split_args","text":"","code":"split_args(...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split arguments to positional and named — split_args","text":"... arguments split","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split arguments to positional and named — split_args","text":"list two named elements: positional, list positional arguments, named, list named arguments.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Split layout — split_layout","title":"Split layout — split_layout","text":"Lays elements horizontally, dividing available horizontal space equal parts (default) specified parameters.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split layout — split_layout","text":"","code":"split_layout(..., cell_widths = NULL, cell_args = \"\", style = NULL)  splitLayout(..., cellWidths = NULL, cellArgs = \"\", style = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split layout — split_layout","text":"... Unnamed arguments become child elements layout. cell_widths Character numeric vector indicating widths individual cells. Recycling used needed. cell_args character additional attributes used cell layout. style character style outer box surrounding elements cellWidths cell_widths cellArgs cell_args","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split layout — split_layout","text":"split layout grid object","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/split_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split layout — split_layout","text":"","code":"if (interactive()) {   #' Server code used for all examples   server <- function(input, output) {     output$plot1 <- renderPlot(plot(cars))     output$plot2 <- renderPlot(plot(pressure))     output$plot3 <- renderPlot(plot(AirPassengers))   }   #' Equal sizing   ui <- semanticPage(     split_layout(       plotOutput(\"plot1\"),       plotOutput(\"plot2\")     )   )   shinyApp(ui, server)   #' Custom widths   ui <- semanticPage(     split_layout(cell_widths = c(\"25%\", \"75%\"),                 plotOutput(\"plot1\"),                 plotOutput(\"plot2\")     )   )   shinyApp(ui, server)   #' All cells at 300 pixels wide, with cell padding   #' and a border around everything   ui <- semanticPage(     split_layout(     cell_widths = 300,     cell_args = \"padding: 6px;\",     style = \"border: 1px solid silver;\",     plotOutput(\"plot1\"),     plotOutput(\"plot2\"),     plotOutput(\"plot3\")   )   )   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Show steps — steps","title":"Show steps — steps","text":"Show steps","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show steps — steps","text":"","code":"steps(id, steps_list, class = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show steps — steps","text":"id ID Steps displayed. steps_list list steps generated single_steps. class (Optional) character string semantic class added steps element.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show steps — steps","text":"","code":"if (interactive()) {  library(shiny)  library(shiny.semantic)  ui <- semanticPage(  title = \"Steps Example\",  shiny::tagList(    h2(\"Steps example\"),    shiny.semantic::steps(      id = \"steps\",      steps_list = list(          single_step(            id = \"step_1\",            title = \"Step 1\",            description = \"It's night?\",            icon_class = \"moon\"          ),          single_step(            id = \"step_2\",            title = \"Step 2\",            description = \"Order some food\",            icon_class = \"bug\"          ),          single_step(id = \"step_3\",                      title = \"Step 3\",                      description = \"Feed the Kiwi\",                      icon_class = \"kiwi bird\"                    )      )    ),    h3(\"Actions\"),    shiny.semantic::action_button(\"step_1_complete\", \"Make it night\"),    shiny.semantic::action_button(\"step_2_complete\", \"Call the insects\"),    shiny.semantic::action_button(\"step_3_complete\", \"Feed the Kiwi\"),    shiny.semantic::action_button(\"hungry_kiwi\", \"Kiwi is hungry again\"),  ) )   server <- function(input, output, session) {    observeEvent(input$step_1_complete, {      toggle_step_state(\"step_1\")    })     observeEvent(input$step_2_complete, {      toggle_step_state(\"step_2\")    })     observeEvent(input$step_3_complete, {      toggle_step_state(\"step_3\")    })     observeEvent(input$hungry_kiwi, {      toggle_step_state(\"step_1\", FALSE)      toggle_step_state(\"step_2\", FALSE)      toggle_step_state(\"step_3\", FALSE)    })   }   shiny::shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/tabset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI tabs — tabset","title":"Create Semantic UI tabs — tabset","text":"creates tabs content using Semantic UI styles.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/tabset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI tabs — tabset","text":"","code":"tabset(   tabs,   active = NULL,   id = generate_random_id(\"menu\"),   menu_class = \"top attached tabular\",   tab_content_class = \"bottom attached grid segment\" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/tabset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI tabs — tabset","text":"tabs list tabs. tab list three elements - first element defines menu item, second element defines tab content, third optional element defines tab id. active Id active tab. NULL first tab active. id Id menu element (default: randomly generated id) menu_class Class menu element (default: \"top attached tabular\") tab_content_class Class tab content (default: \"bottom attached segment\")","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/tabset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Semantic UI tabs — tabset","text":"may access active tab id input$<id>.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/tabset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI tabs — tabset","text":"","code":"## Only run examples in interactive R sessions if (interactive()){   library(shiny)   library(shiny.semantic)    ui <- semanticPage(     tabset(tabs =              list(                list(menu = \"First Tab\", content = \"Tab 1\"),                list(menu = \"Second Tab\", content = \"Tab 2\", id = \"second_tab\")              ),            active = \"second_tab\",            id = \"exampletabset\"     ),     h2(\"Active Tab:\"),     textOutput(\"activetab\")   )   server <- function(input, output) {       output$activetab <- renderText(input$exampletabset)   }   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/textAreaInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a semantic Text Area input — textAreaInput","title":"Create a semantic Text Area input — textAreaInput","text":"Create text area input control entry unstructured text values.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/textAreaInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a semantic Text Area input — textAreaInput","text":"","code":"textAreaInput(inputId, label, value = \"\", width = NULL, placeholder = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/textAreaInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a semantic Text Area input — textAreaInput","text":"inputId Input name. Reactive value available input[[input_id]]. label character label put input value Pass value want default text. width width input, eg. \"40px\" placeholder Text visible input nothing inputted.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/textAreaInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a semantic Text Area input — textAreaInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { ui <- semanticPage(   textAreaInput(\"a\", \"Area:\", value = \"200\", width = \"200px\"),   verbatimTextOutput(\"value\") ) server <- function(input, output, session) {   output$value <- renderText({ input$a }) } shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/text_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Text Input — text_input","title":"Create Semantic UI Text Input — text_input","text":"creates default text input using Semantic UI. input available input[[input_id]].","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/text_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Text Input — text_input","text":"","code":"text_input(   input_id,   label = NULL,   value = \"\",   type = \"text\",   placeholder = NULL,   attribs = list() )  textInput(   inputId,   label,   value = \"\",   width = NULL,   placeholder = NULL,   type = \"text\" )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/text_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Text Input — text_input","text":"input_id Input name. Reactive value available input[[input_id]]. label character label put left input value Pass value want default text. type Change depending type input wanted. See details options. placeholder Text visible input nothing inputted. attribs named list attributes assign input. inputId Input name. input_id. width width input, eg. \"40px\"","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/text_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Semantic UI Text Input — text_input","text":"following type s allowed: text standard input textarea extended space text password censored version text input email special version text input specific email addresses url special version text input specific URLs tel special version text input specific telephone numbers inputs updateable using updateTextInput updateTextAreaInput type = \"textarea\".","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/text_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Text Input — text_input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {   library(shiny)   library(shiny.semantic)   ui <- semanticPage(     uiinput(       text_input(\"ex\", label = \"Your text\", type = \"text\", placeholder = \"Enter Text\")     )   )   server <- function(input, output, session) {  }  shinyApp(ui, server)  }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/theme_selector.html","id":null,"dir":"Reference","previous_headings":"","what":"Themes changer dropdown — theme_selector","title":"Themes changer dropdown — theme_selector","text":"Themes changer dropdown","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/theme_selector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Themes changer dropdown — theme_selector","text":"","code":"theme_selector(input_id = \"theme\", label = \"Choose theme\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/theme_selector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Themes changer dropdown — theme_selector","text":"input_id Id dropdown. input[[input_id]] returns currently selected theme. label Dropdown label.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/theme_selector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Themes changer dropdown — theme_selector","text":"","code":"if (interactive()) { library(shiny)  library(shiny.semantic)   ui <- semanticPage(     theme = \"superhero\",     actionButton(\"action_button\", \"Press Me!\"),     textOutput(\"button_output\"),     theme_selector(),     textOutput(\"theme\")   )   server <- function(input, output, session) {     output$button_output <- renderText(as.character(input$action_button))     output$theme <- renderText(as.character(input$theme))   }   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/toast.html","id":null,"dir":"Reference","previous_headings":"","what":"Show and remove Semantic UI toast — toast","title":"Show and remove Semantic UI toast — toast","text":"functions either create remove toast notifications Semantic UI styling.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/toast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show and remove Semantic UI toast — toast","text":"","code":"toast(   message,   title = NULL,   action = NULL,   duration = 3,   id = NULL,   class = \"\",   toast_tags = NULL,   session = shiny::getDefaultReactiveDomain() )  close_toast(id, session = shiny::getDefaultReactiveDomain())  showNotification(   ui,   action = NULL,   duration = 5,   closeButton = TRUE,   id = NULL,   type = c(\"default\", \"message\", \"warning\", \"error\"),   session = getDefaultReactiveDomain(),   ... )  removeNotification(id, session = shiny::getDefaultReactiveDomain())"},{"path":"https://appsilon.github.io/shiny.semantic/reference/toast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show and remove Semantic UI toast — toast","text":"message Content message. title title given toast. Defauly empty (\"\"). action list lists containing settings buttons/options select within duration Length seconds toast appear, default 3 seconds. make automatically close, set 0. id unique identifier notification. optional toast, required close_toast. class Classes except \"ui toast\" added toast. Semantic UI classes can used. Default \"\". toast_tags toast elements. Default NULL. session Session object send notification . ui Content toast. closeButton Logical, close icon appear toast? type Type toast ... Arguments can passed toast","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/toast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show and remove Semantic UI toast — toast","text":"","code":"## Create a simple server toast library(shiny) library(shiny.semantic)  ui <- function() {   shinyUI(     semanticPage(       actionButton(\"show\", \"Show toast\")     )   ) }  server = function(input, output) {   observeEvent(input$show, {     toast(       \"This is an important message!\"     )   }) } if (interactive()) shinyApp(ui, server)  ## Create a toast with options ui <- semanticPage(   actionButton(\"show\", \"Show\"), ) server <- function(input, output) {   observeEvent(input$show, {     toast(       title  = \"Question\",       \"Do you want to see more?\",       duration = 0,       action = list(         list(           text = \"OK\", class = \"green\", icon = \"check\",           click = (\"(function() { $('body').toast({message:'Yes clicked'}); })\")         ),         list(           text = \"No\", class = \"red\", icon = \"times\",           click = (\"(function() { $('body').toast({message:'No ticked'}); })\")         )       )     )   }) }  if (interactive()) shinyApp(ui, server)  ## Closing a toast ui <- semanticPage(   action_button(\"show\", \"Show\"),   action_button(\"remove\", \"Remove\") ) server <- function(input, output) {   # A queue of notification IDs   ids <- character(0)   # A counter   n <- 0    observeEvent(input$show, {     # Save the ID for removal later     id <- toast(paste(\"Message\", n), duration = NULL)     ids <<- c(ids, id)     n <<- n + 1   })    observeEvent(input$remove, {     if (length(ids) > 0)       close_toast(ids[1])     ids <<- ids[-1]   }) }  if (interactive()) shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/toggle_step_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggle step state — toggle_step_state","title":"Toggle step state — toggle_step_state","text":"Toggle step state","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/toggle_step_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggle step state — toggle_step_state","text":"","code":"toggle_step_state(id, state = TRUE, automatic_steps = TRUE, asis = TRUE)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/toggle_step_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggle step state — toggle_step_state","text":"id ID step toggled state State step, TRUE stands enabled automatic_steps Whether toggle focus next step automatically asis used inside Shiny module, TRUE disable adding namespace id","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/uiinput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Semantic UI Input — uiinput","title":"Create Semantic UI Input — uiinput","text":"creates input shell actual input","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/uiinput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Semantic UI Input — uiinput","text":"","code":"uiinput(..., class = \"\")"},{"path":"https://appsilon.github.io/shiny.semantic/reference/uiinput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Semantic UI Input — uiinput","text":"... arguments added attributes tag (e.g. style, class childrens etc.) class Additional classes add html tag.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/uiinput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Semantic UI Input — uiinput","text":"","code":"#' ## Only run examples in interactive R sessions if (interactive()) { library(shiny) library(shiny.semantic)  ui <- semanticPage(   uiinput(icon(\"dog\"),           numeric_input(\"input\", value = 0, label = \"\")   ) )  server <- function(input, output, session) { }  shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/uirender.html","id":null,"dir":"Reference","previous_headings":"","what":"Render semanticui htmlwidget — uirender","title":"Render semanticui htmlwidget — uirender","text":"htmlwidget adds semanticui dependencies renders viewer rmarkdown.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/uirender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render semanticui htmlwidget — uirender","text":"","code":"uirender(ui, width = NULL, height = NULL, element_id = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/uirender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render semanticui htmlwidget — uirender","text":"ui UI, wraped htmlwidget. width Fixed width widget (css units). default NULL, results intelligent automatic sizing. height Fixed height widget (css units). default NULL, results intelligent automatic sizing. element_id Use explicit element ID widget (rather automatically generated one).","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/uirender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render semanticui htmlwidget — uirender","text":"","code":"library(shiny) library(shiny.semantic) uirender(card(div(class=\"content\",                   div(class=\"header\", \"Elliot Fu\"),                   div(class=\"meta\", \"Friend\"),                   div(class=\"description\", \"Elliot Fu is a film-maker from New York.\"))))  {\"x\":{\"ui\":\"<div class=\\\"ui card \\\">\\n  <div class=\\\"content\\\">\\n    <div class=\\\"header\\\">Elliot Fu<\\/div>\\n    <div class=\\\"meta\\\">Friend<\\/div>\\n    <div class=\\\"description\\\">Elliot Fu is a film-maker from New York.<\\/div>\\n  <\\/div>\\n<\\/div>\",\"shiny_custom_semantic\":\"/home/runner/work/_temp/Library/semantic.assets/www/shared/semantic\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://appsilon.github.io/shiny.semantic/reference/updateSelectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a select input on the client — updateSelectInput","title":"Change the value of a select input on the client — updateSelectInput","text":"Update selecInput widget","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/updateSelectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a select input on the client — updateSelectInput","text":"","code":"updateSelectInput(   session,   inputId,   label = NULL,   choices = NULL,   selected = NULL )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/updateSelectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a select input on the client — updateSelectInput","text":"session session object passed function given shinyServer. inputId id input object. label label set input object. choices List values select . elements list named, name — rather value — displayed user. selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/updateSelectInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a select input on the client — updateSelectInput","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {    ui <- semanticPage(     p(\"The checkbox group controls the select input\"),     multiple_checkbox(\"checkboxes\", \"Input checkbox\",                       c(\"Item A\", \"Item B\", \"Item C\")),     selectInput(\"inSelect\", \"Select input\",                 c(\"Item A\", \"Item B\"))   )    server <- function(input, output, session) {     observe({       x <- input$checkboxes        # Can use character(0) to remove all choices       if (is.null(x))         x <- character(0)        # Can also set the label and select items       updateSelectInput(session, \"inSelect\",                         label = paste(input$checkboxes, collapse = \", \"),                         choices = x,                         selected = tail(x, 1)       )     })   }    shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_action_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the label or icon of an action button on the client — update_action_button","title":"Change the label or icon of an action button on the client — update_action_button","text":"Change label icon action button client","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_action_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the label or icon of an action button on the client — update_action_button","text":"","code":"update_action_button(session, input_id, label = NULL, icon = NULL)  updateActionButton(session, inputId, label = NULL, icon = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_action_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the label or icon of an action button on the client — update_action_button","text":"session session object passed function given shinyServer. input_id id input object. label label set input object. icon icon set input object. remove current icon, use icon=character(0) inputId input_id","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_action_button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the label or icon of an action button on the client — update_action_button","text":"","code":"if (interactive()){ library(shiny) library(shiny.semantic)  ui <- semanticPage(   actionButton(\"update\", \"Update button\"),   br(),   actionButton(\"go_button\", \"Go\") )  server <- function(input, output, session) {   observe({     req(input$update)      # Updates go_button's label and icon     updateActionButton(session, \"go_button\",                        label = \"New label\",                        icon = icon(\"calendar\"))    }) } shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_dropdown_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Update dropdown Semantic UI component — update_dropdown_input","title":"Update dropdown Semantic UI component — update_dropdown_input","text":"Change value dropdown_input input client.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_dropdown_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update dropdown Semantic UI component — update_dropdown_input","text":"","code":"update_dropdown_input(   session,   input_id,   choices = NULL,   choices_value = choices,   value = NULL )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_dropdown_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update dropdown Semantic UI component — update_dropdown_input","text":"session session object passed function given shinyServer. input_id id input object choices available options one can select . need update leave NULL choices_value reactive value used corresponding choice. value initially selected value.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_dropdown_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update dropdown Semantic UI component — update_dropdown_input","text":"","code":"if (interactive()) {  library(shiny) library(shiny.semantic)  ui <- function() {   shinyUI(     semanticPage(       title = \"Dropdown example\",       dropdown_input(\"simple_dropdown\", LETTERS[1:5], value = \"A\", type = \"selection multiple\"),       p(\"Selected letter:\"),       textOutput(\"selected_letter\"),       shiny.semantic::actionButton(\"simple_button\", \"Update input to D\")     )   ) }  server <- shinyServer(function(input, output, session) {   output$selected_letter <- renderText(paste(input[[\"simple_dropdown\"]], collapse = \", \"))    observeEvent(input$simple_button, {     update_dropdown(session, \"simple_dropdown\", value = \"D\")   }) })  shinyApp(ui = ui(), server = server)  }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_multiple_checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Update checkbox Semantic UI component — update_multiple_checkbox","title":"Update checkbox Semantic UI component — update_multiple_checkbox","text":"Change value multiple_checkbox input client.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_multiple_checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update checkbox Semantic UI component — update_multiple_checkbox","text":"","code":"update_multiple_checkbox(   session = getDefaultReactiveDomain(),   input_id,   choices = NULL,   choices_value = choices,   selected = NULL,   label = NULL )  update_multiple_radio(   session = getDefaultReactiveDomain(),   input_id,   choices = NULL,   choices_value = choices,   selected = NULL,   label = NULL )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_multiple_checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update checkbox Semantic UI component — update_multiple_checkbox","text":"session session object passed function given shinyServer. input_id id input object choices available options one can select . need update leave NULL choices_value reactive value used corresponding choice. selected initially selected value. label label linked input","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_multiple_checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update checkbox Semantic UI component — update_multiple_checkbox","text":"","code":"if (interactive()) {  library(shiny) library(shiny.semantic)  ui <- function() {   shinyUI(     semanticPage(       title = \"Checkbox example\",       form(         multiple_checkbox(           \"simple_checkbox\", \"Letters:\", LETTERS[1:5], selected = c(\"A\", \"C\"), type = \"slider\"         )       ),       p(\"Selected letter:\"),       textOutput(\"selected_letter\"),       shiny.semantic::actionButton(\"simple_button\", \"Update input to D\")     )   ) }  server <- shinyServer(function(input, output, session) {   output$selected_letter <- renderText(paste(input[[\"simple_checkbox\"]], collapse = \", \"))    observeEvent(input$simple_button, {     update_multiple_checkbox(session, \"simple_checkbox\", selected = \"D\")   }) })  shinyApp(ui = ui(), server = server)  }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_numeric_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Change numeric input value and settings — update_numeric_input","title":"Change numeric input value and settings — update_numeric_input","text":"Change numeric input value settings","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_numeric_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change numeric input value and settings — update_numeric_input","text":"","code":"update_numeric_input(   session,   input_id,   label = NULL,   value = NULL,   min = NULL,   max = NULL,   step = NULL )  updateNumericInput(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   value = NULL,   min = NULL,   max = NULL,   step = NULL )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_numeric_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change numeric input value and settings — update_numeric_input","text":"session session object passed function given shinyServer. input_id id input object. label label set input object. value value set input object. min Minimum value. max Maximum value. step Step size. inputId input_id","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_numeric_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change numeric input value and settings — update_numeric_input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { library(shiny) library(shiny.semantic)  ui <- semanticPage(   slider_input(\"slider_in\", 5, 0, 10),   numeric_input(\"input\", \"Numeric input:\", 0) )  server <- function(input, output, session) {    observeEvent(input$slider_in, {     x <- input$slider_in      update_numeric_input(session, \"input\", value = x)   }) }  shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Update progress Semantic UI component — update_progress","title":"Update progress Semantic UI component — update_progress","text":"Change value progress input client.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update progress Semantic UI component — update_progress","text":"","code":"update_progress(   session,   input_id,   type = c(\"increment\", \"decrement\", \"label\", \"value\"),   value = 1 )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update progress Semantic UI component — update_progress","text":"session session object passed function given shinyServer. input_id id input object type Whether want increase progress bar (\"increment\"), decrease progress bar (\"decrement\"), update label \"label\", set specific value (\"value\") value value increase/decrease , value set ","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_rating.html","id":null,"dir":"Reference","previous_headings":"","what":"Update rating — update_rating_input","title":"Update rating — update_rating_input","text":"Change value rating input client. Check rating_input learn .","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_rating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update rating — update_rating_input","text":"","code":"update_rating_input(session, input_id, label = NULL, value = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_rating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update rating — update_rating_input","text":"session shiny object session info input_id rating input name label character updated label value new rating value","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_rating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update rating — update_rating_input","text":"","code":"## Only run examples in interactive R sessions if (interactive()) { library(shiny) library(shiny.semantic)  ui <- shinyUI(   semanticPage(     rating_input(\"rate\", \"How do you like it?\", max = 5,                  icon = \"heart\", color = \"yellow\"),     numeric_input(\"numeric_in\", \"\", 0, min = 0, max = 5)   ) ) server <- function(session, input, output) {   observeEvent(input$numeric_in, {     x <- input$numeric_in     update_rating_input(session, \"rate\", value = x)   }   ) } shinyApp(ui = ui, server = server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_slider.html","id":null,"dir":"Reference","previous_headings":"","what":"Update slider Semantic UI component — update_slider","title":"Update slider Semantic UI component — update_slider","text":"Change value slider_input input client.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_slider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update slider Semantic UI component — update_slider","text":"","code":"update_slider(session, input_id, value)  update_range_input(session, input_id, value, value2)  updateSliderInput(session, inputId, value, ...)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_slider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update slider Semantic UI component — update_slider","text":"session session object passed function given shinyServer. input_id id input object value value selected sldier (lower value using range). value2 upper value range. inputId Input name. ... additional arguments","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_slider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update slider Semantic UI component — update_slider","text":"","code":"## Only run this example in interactive R sessions if (interactive()) {   shinyApp(     ui = semanticPage(       p(\"The first slider controls the second\"),       slider_input(\"control\", \"Controller:\", min = 0, max = 20, value = 10,                    step = 1),       slider_input(\"receive\", \"Receiver:\", min = 0, max = 20, value = 10,                    step = 1)     ),     server = function(input, output, session) {       observe({         update_slider(session, \"receive\", value = input$control)       })     }   ) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_tabset.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the selected tab of a tabset on the client — update_tabset","title":"Change the selected tab of a tabset on the client — update_tabset","text":"Change selected tab tabset client","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_tabset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the selected tab of a tabset on the client — update_tabset","text":"","code":"update_tabset(session, input_id, selected = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_tabset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the selected tab of a tabset on the client — update_tabset","text":"session session object passed function given shinyServer. input_id id tabset object. selected id tab selected.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/update_tabset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the selected tab of a tabset on the client — update_tabset","text":"","code":"if (interactive()){  library(shiny)  library(shiny.semantic)   ui <- semanticPage(    actionButton(\"changetab\", \"Select Second Tab\"),    tabset(       tabs = list(           list(menu = \"First Tab\", content = \"First Tab\", id= \"first_tab\"),           list(menu = \"Second Tab\", content = \"Second Tab\", id = \"second_tab\")       ),       active = \"first_tab\",       id = \"exampletabset\"    )  )   server <- function(input, output, session) {      observeEvent(input$changetab,{          update_tabset(session, \"exampletabset\", \"second_tab\")      })  }   shinyApp(ui, server) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/vertical_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertical layout — vertical_layout","title":"Vertical layout — vertical_layout","text":"Lays elements vertically, one one one another.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/vertical_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertical layout — vertical_layout","text":"","code":"vertical_layout(   ...,   rows_heights = NULL,   cell_args = \"\",   adjusted_to_page = TRUE )  verticalLayout(..., fluid = NULL)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/vertical_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertical layout — vertical_layout","text":"... Unnamed arguments become child elements layout. rows_heights Character numeric vector indicating widths individual cells. Recycling used needed. cell_args character additional attributes used cell layout. adjusted_to_page TRUE adjust elements position equal spaces size page fluid supported yet (consistency shiny)","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/vertical_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertical layout — vertical_layout","text":"vertical layout grid object","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/vertical_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertical layout — vertical_layout","text":"","code":"if (interactive()) {   ui <- semanticPage(     verticalLayout(       a(href=\"http://example.com/link1\", \"Link One\"),       a(href=\"http://example.com/link2\", \"Link Two\"),       a(href=\"http://example.com/link3\", \"Link Three\")     )   )   shinyApp(ui, server = function(input, output) { }) } if (interactive()) {   ui <- semanticPage(     vertical_layout(h1(\"Title\"), h4(\"Subtitle\"), p(\"paragraph\"), h3(\"footer\"))   )   shinyApp(ui, server = function(input, output) { }) }"},{"path":"https://appsilon.github.io/shiny.semantic/reference/warn_unsupported_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn that there are not supported arguments — warn_unsupported_args","title":"Warn that there are not supported arguments — warn_unsupported_args","text":"throws warning parameters supported semantic.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/warn_unsupported_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn that there are not supported arguments — warn_unsupported_args","text":"","code":"warn_unsupported_args(args)"},{"path":"https://appsilon.github.io/shiny.semantic/reference/warn_unsupported_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn that there are not supported arguments — warn_unsupported_args","text":"args list vector extra arguments","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/with_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Reporting progress (functional API) — with_progress","title":"Reporting progress (functional API) — with_progress","text":"Reports progress user long-running operations.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/with_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting progress (functional API) — with_progress","text":"","code":"with_progress(   expr,   min = 0,   max = 1,   value = min + (max - min) * 0.1,   message = NULL,   session = getDefaultReactiveDomain(),   env = parent.frame(),   quoted = FALSE )  withProgress(   expr,   min = 0,   max = 1,   value = min + (max - min) * 0.1,   message = NULL,   session = getDefaultReactiveDomain(),   env = parent.frame(),   quoted = FALSE,   ... )  setProgress(   value = NULL,   message = NULL,   session = getDefaultReactiveDomain(),   ... )  set_progress(   value = NULL,   message = NULL,   session = getDefaultReactiveDomain() )  incProgress(   amount = 0.1,   message = NULL,   session = getDefaultReactiveDomain(),   ... )  inc_progress(   amount = 0.1,   message = NULL,   session = getDefaultReactiveDomain(),   ... )"},{"path":"https://appsilon.github.io/shiny.semantic/reference/with_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting progress (functional API) — with_progress","text":"expr work done. expression contain calls `set_progress`. min value represents starting point progress bar. Must less tham `max`. Default 0. max value represents end progress bar. Must greater `min`. Default 1. value Single-element numeric vector; value set progress bar, relative `min` `max`. message single-element character vector; message displayed user, `NULL` hide current message (). session Shiny session object, provided `shinyServer` server function. default automatically find session using current reactive domain. env environment `expr` evaluated. quoted Whether `expr` quoted expression (common). ... Arguments may used `shiny::withProgress` amount `inc_progress`, amount increment status bar. Default 0.1.","code":""},{"path":"https://appsilon.github.io/shiny.semantic/reference/with_progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reporting progress (functional API) — with_progress","text":"package exposes two distinct programming APIs working progress. Using `with_progress` `inc_progress` `set_progress` provide simple function-based interface, [Progress()] reference class provides object-oriented API. Use `with_progress` wrap scope work; cause new progress panel created, displayed first time `inc_progress` `set_progress` called. `with_progress` exits, corresponding progress panel removed. `inc_progress` function increments status bar specified amount, whereas `set_progress` function sets specific value, can also set text displayed. Generally, `with_progress`/`inc_progress`/`set_progress` sufficient; exception work done asynchronous (common) otherwise encapsulated single scope. case, can use `Progress` reference class. migrating shiny applications, functions `withProgress`, `incProgress` `setProgress` aliases `with_progress`, `inc_progress` `set_progress`.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.semantic/reference/with_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reporting progress (functional API) — with_progress","text":"","code":"## Only run examples in interactive R sessions if (interactive()) {  ui <- semanticPage(   plotOutput(\"plot\") )  server <- function(input, output) {   output$plot <- renderPlot({     with_progress(message = 'Calculation in progress',                  detail = 'This may take a while...', value = 0, {       for (i in 1:15) {         inc_progress(1/15)         Sys.sleep(0.25)       }     })     plot(cars)   }) }  shinyApp(ui, server) }"}]
