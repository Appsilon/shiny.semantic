% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dropdown.R
\name{update_dropdown}
\alias{update_dropdown}
\title{Update dropdown Semantic UI component}
\usage{
update_dropdown(
  session,
  name,
  choices = NULL,
  choices_value = choices,
  value = NULL
)
}
\arguments{
\item{session}{The \code{session} object passed to function given to \code{shinyServer}.}

\item{name}{The id of the input object}

\item{choices}{All available options one can select from. If no need to update then leave as \code{NULL}}

\item{choices_value}{What reactive value should be used for corresponding choice.}

\item{value}{The initially selected value.}
}
\description{
Change the value of a \code{\link{dropdown_input}} input on the client.
}
\examples{
if (interactive()) {

library(shiny)
library(shiny.semantic)

ui <- function() {
  shinyUI(
    semanticPage(
      title = "Dropdown example",
      dropdown_input("simple_dropdown", LETTERS[1:5], value = "A", type = "selection multiple"),
      p("Selected letter:"),
      textOutput("selected_letter"),
      shiny.semantic::actionButton("simple_button", "Update input to D")
    )
  )
}

server <- shinyServer(function(input, output, session) {
  output$selected_letter <- renderText(paste(input[["simple_dropdown"]], collapse = ", "))

  observeEvent(input$simple_button, {
    update_dropdown(session, "simple_dropdown", value = "D")
  })
})

shinyApp(ui = ui(), server = server)

}

}
