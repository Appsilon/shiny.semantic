% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calendar_range.R
\name{calendar_range}
\alias{calendar_range}
\alias{update_calendar_range}
\title{Create Semantic UI Calendar Range}
\usage{
calendar_range(
  input_id,
  type = "date",
  start_value = NULL,
  end_value = NULL,
  start_placeholder = NULL,
  end_placeholder = NULL,
  min = NA,
  max = NA,
  start_label = NULL,
  end_label = NULL
)

update_calendar_range(
  session,
  input_id,
  start_value = NULL,
  end_value = NULL,
  min = NULL,
  max = NULL
)
}
\arguments{
\item{input_id}{ID of the calendar range that will be updated}

\item{type}{Select from \code{'year'}, \code{'month'}, \code{'date'} and \code{'time'}.}

\item{start_value}{Initial value of the calendar defining the start of the range.}

\item{end_value}{Initial value of the calendar defining the end of the range.}

\item{start_placeholder}{Text visible in the start calendar input when nothing is inputted.}

\item{end_placeholder}{Text visible in the end calendar input when nothing is inputted.}

\item{min}{Minimum allowed value in both calendars.}

\item{max}{Maximum allowed value in both calendars.}

\item{start_label}{Label text in the start calendar.}

\item{end_label}{Label text in the end calendar.}

\item{session}{The \code{session} object passed to function given to
\code{shinyServer}.}
}
\description{
This is a wrapper for creating calendar ranges using Semantic UI calendars.
It creates a form composed of two calendars. The selected range values are
available under \code{input[[input_id]]}.

This function updates the dates on a calendar range.
}
\details{
The Semantic UI calendar range automatically pops up the end range
calendar when changing the start range. Therefore events are only sent on
changes done in the end range calendar.
}
